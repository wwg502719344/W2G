1:no-sql
	当SQL满足不了你的需求或者SQL 已经不是必须的或者最佳的选择时，就是你考虑这类NoSQL 的时候了。
	在一些对数据集的分析中，传统的关系型数据库的计算成本变得很大。
	特点：易扩展、大数据、高可用、高性能、灵活性
	总结：mongoDB做高性能数据库，Redis做缓存，HBase做大数据分析
	
	1-HBase:
		用途：
			1:特别适用于简单数据写入（如“消息类”应用）和海量、结构简单数据的查询（如“详单类”应用）。特别地，适合稀疏表。（个人觉得存个网页内容是极好极好的）
			2:作为MapReduce的后台数据源，以支撑离线分析型应用。
		
		场景：
			Facebook的消息类应用，包括Messages、Chats、Emails和SMS系统，用的都是HBase；
			淘宝的WEB版阿里旺旺，后台是HBase；小米的米聊用的也是HBase；

		Hbase和hadhoop的关系：
			Hbase是Hadoop database，即Hadoop数据库。它是一个适合于非结构化数据存储的数据库

	2：mongodb：
		1：是一个介于关系型和非关系型之间的一个产品吧，类SQL语言，支持索引
		2：MongoDb在类SQL语句操作方面目前比HBase具备更多一些优势，有二级索引，支持相比于HBase更复杂的集合查找等。
		3：BSON的数据结构使得处理文档型数据更为直接。支持复杂的数据结构
		4：MongoDb也支持mapreduce，但由于HBase跟Hadoop的结合更为紧密，Mongo在数据分片等mapreduce必须的属性上不如HBase这么直接，需要额外处理。


	3：redis：
		1：Redis为内存型KV系统，处理的数据量要小于HBase与MongoDB
		2：Redis很适合用来做缓存，但除此之外，它实际上还可以在一些“读写分离”的场景下作为“读库”来用，特别是用来存放Hadoop或Spark的分析结果。
		3：Redis的读写性能在100,000 ops/s左右，时延一般为10～70微妙左右；而HBase的单机读写性能一般不会超过1,000ops/s，时延则在1～5毫秒之间。
		4：Redis的魅力还在于它不像HBase只支持简单的字符串，他还支持集合set，有序集合zset和哈希hash


		Pub/Sub 机制：
			Redis 也支持消息的发布订阅模式.订阅者(Sub)通过指定命令向redis服务订阅频道(channel)，发布者通过命令向channel发布命令，订阅该频道的
			订阅者都会受到消息







2：pinpoint：
	1-作用：
		一个分布式事务跟踪系统的平台，用于基于java的大规模分布式系统，
		通过跟踪分布式应用之间的调用来提供解决方案，以帮助分析系统的总体结构和内部模块之间如何相互联系

	2-构成：
		有3个主要组件组成：日志收集器[Collector]、控制台[Web]、代理[Agent]
		采用HBase进行存储。 Collector和Web都是WAR包,Agent采用一个JAVA应用程序加载。

		Pinpoint-Collector：收集各种性能数据
		Pinpoint-Agent：和自己运行的应用关联起来的探针
		Pinpoint-Web：将收集到的数据显示成WEB网页形式
		HBase Storage：收集到的数据存到HBase中

	3-特点
		分布式事务跟踪，跟踪跨分布式应用的消息 自动检测应用拓扑，帮助你搞清楚应用的架构 水平扩展以便支持大规模服务器集群
		提供代码级别的可见性以便轻松定位失败点和瓶颈 使用字节码增强技术，添加新功能而无需修改代码


3：hdfs：
	1-定义：
		hdfs只是一个存储空间，他的完整名字是分布式文件系统

	2-hdfs和Hbase的关系：
		hbase是一个内存数据库，而hdfs是一个存储空间；是物品和房子的关系，单点说hbase把表啊什么的存在hdfs上

4：hadoop
	1-概念：
		分布式服务器集群上存储海量数据并运行分布式分析应用的一种方法

	2-能做什么
		1）搜索引擎：这也正是Doug Cutting设计Hadoop的初衷，为了针对大规模的网页快速建立索引；
		2）大数据存储：利用Hadoop的分布式存储能力，例如数据备份、数据仓库等；
		3）大数据处理：利用Hadoop的分布式处理能力，例如数据挖掘、数据分析等；
		4）科学研究：Hadoop是一种分布式的开源框架，对于分布式系统有很大程度地参考价值。

	3-Hbase-HDFS存储方式
		HBase通常采用集群模式，大量的索引文件被切分为很多块（block）分散存放在不同的节点上面，
		这些块（block）存放在HDFS上面，
		由于HDFS的数据冗余机制，当存放块的某一个节点宕机，HBase可以从其他节点取出宕机机器存储的数据，
		这样可以保证这些数据的高可用性，而且当集群数量越大高可用性越高。



*5*:kafka
	出现的原因：
		传统的项目结构，小而美
		随着用户的增长
			1-sql数据库不堪重负，加上缓存降低sql数据库的负荷
			2-为了理解用户行为，收集日志保存到hadoop做离线分析(Hbase)，同时把日志放在全文检索中以便进行快速定位问题
			3-需要给投资方看业务状况，需要把数据汇总到数据仓库中以便提供交互式报表，
			4-实时模块以及外部数据交互。。。

	本质的问题：
		数据集成问题，所有业务数据根据不同的用途存放在不同的系统当中，比如归档，分析，搜索，缓存，不同系统之间复杂的数据同步是巨大的问题


	1-作用：
		让合适的数据以合适的形式出现在合适的地方，用作提供消息队列，让生产者往队列的尾部添加数据，让消费者从队列中依次读取数据并自行处理

	2-kafka，mq，redis的比较：
		redis消息推送(基于分布式sub/pub)，用于实时性较高的推送，但是不保证可靠，在断电的情况下数据会清空

		kafka和mq的比较
			1-吞吐量方面
				kafka采用消息的批量处理，数据的存储和获取是本地磁盘顺序批量操作
				rabbitMQ吞吐量差点，支持消息的可靠传递，支持事务，不支持消息的批量查询，基于存储的可靠性存储要求采用内存或是硬盘
			2-在可用性方面
				rabbitMQ支持miror的queue，主queue失效，miror queue接管
				kafka的broker支持主备模式
			3-集群负载均衡方面
				kafka采用zk对集群中的broke，consumer进行管理(搞不清)
				abbitMQ的负载均衡需要单独的loadbalancer进行支持。



6：Kubernetes集群
	什么是Kubernetes：
		是一个在集群主机间进行自动化部署，拓展和容器操作的提供以容器为基础设施的开源平台

	kubernets可以做什么
		1快速而有预期的部署你的应用
		2快速的扩展你的应用
		3铺展新的应用功能




*7*ELK：
	定义及内容：
		ElasticSerach、Logstash、Kibana三款产品名称的首字母集合，用于日志的搜集和搜索，ELK+Filebeat的架构进行平台搭建

		1：Filebeats:
			定义：
				日志文件托运工具，在服务器上安装了客户端后，会监控日志目录或是指定的日志文件，并且转发这些信息到elasticsearch或者logstarsh中存放和解析

			优点：
				轻量级的logstash，部署简单，占用资源少，所占系统的 CPU 和内存几乎可以忽略不计。
				Beats 和 Logstash 之间支持 SSL/TLS 加密传输，客户端和服务器双向认证，保证了通信安全


		2：Elasticsearch：
			分布式搜索和分析引擎，具有高可伸缩,高可靠和易管理的特点，基于Lucene构建，能对大容量的数据进行实时的存储，搜索和分析，
		通常被用作某些基础应用的基础搜索引擎

		3：Logstash：
			数据处理引擎，支持动态的从各种数据源搜集数据，并对数据进行过滤，分析，统一格式等操作，然后存储到ES；

		4：Kibana：
			数据分析和可视化平台，配合ES使用，对数据进行搜索，分析，和以统计图的方式展示



	ELK常用架构及使用场景
		1：All-In-One
			在这种架构中，只有一个Logstash,es,kibana实例，集中部署于一台服务器,Logstash通过输入插件从多种数据源获取数据，再进过过滤插件
		加工数据，然后经过es输出插件输出到es，通过kibana展示

		2：Logstash 分布式采集
			将一个Logstash扩展成多个，分布于多台机器，将解析好的数据发送到es进行存储，再用kibana查询，生成日志报表
			缺点：这种方式需要在各个服务器上部署Logstash，比较消耗cpu和内存资源

		3：Beats分布式采集
			这种架构引入Beats作为日志搜集器，目前Beats包含四种：
				1：Packetbeat（搜集网络流量数据）；
				2：Topbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）；
				3：Filebeat（搜集文件数据）；
				4：Winlogbeat（搜集 Windows 事件日志数据）。

			beats将收集到的数据发送到Logstash，经过Logstash解析过滤后，将其发送给es进行存储，再由kibana展现给用户

			评价：
				这种架构解决了Logstash占用资源过大的问题，beats相比较于Logstash所占的cpu和内存可以忽略不计，而且beats和logstash之间支持
			SSL/TLS加密传输，安全可以得到保障