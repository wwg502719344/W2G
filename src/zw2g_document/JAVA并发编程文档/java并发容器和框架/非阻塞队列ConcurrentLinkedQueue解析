ConcurrentLinkedQueue是一个非阻塞线程安全的队列

ConcurrentLinkeQueue的基本结构
CLQ由head节点和tail节点组成，每个node节点由item和next节点构成，节点之间的关联通过next进行引用
head节点默认指向一个空node，head并不总是指向首节点，有可能指向一个空的节点
tail节点初始化默认指向head节点，并且并不总是指向尾节点，误差在一个HOPS之间

HOPS设计的目的
为了提高入队效率，通过降低对volatile变量的写操作的方式(减少tail和head变量的更新)

CLQ的入队操作
1-创建一个入队节点n，创建一个p节点指向当前的tail节点
2-定位尾节点位置
    1-如果p节点的next节点不为空，说明p节点不是正真的尾节点，赋值next节点继续循环
    2-如果p节点为空，则设置p的next节点为n节点，如果循环次数大于默认次数，则设置
    tail节点为尾节点

CLQ的出队操作
1-设置p节点为头节点
2-如果头节点为空，则获取头节点的下一个节点next，如果next为空，说明队列已经空了，更新头节点并跳出
如果next节点不为空，则把next节点设置为头节点p，继续进行循环
3-如果p节点不为空，则出队(返回item并将p节点的item设置为null)，并比较循环次数是否在常量范围内，
如果在范围内，则不做处理，如果在范围外则将p节点的next节点通过cas的方式设置为头节点

