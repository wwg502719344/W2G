java并发编程基础原理

    Q:多线程与并发的关系
    A:多线程是并发的一种方式，多线程是提高CPU使用的手段，作用就是使CPU的使用率达到最大化，
    多线程可以更加高效的处理并发的请求

    Q:两种猜想，基于高并发
    A:基于http请求，多线程由servlet容器完成，单线程下的多线程只是为了处理业务功能或IO密集(我认为是对的)
    A:多线程由servlet容器实现，java多线程用于提高并发能力，因为是单例，所以代码中的多线程用于
    应对HTTP请求的高并发，实现CPU的利用率(前面一般是对的，业务中的多线程不是为了应对高并发，和单例无关)
    A2:针对上面的答案，这个问题的根源还是在于单例和多例，单例模式下，高并发场景如果涉及到类变量，那么类变量
    就是非安全的，因为只创建了一个对象，但在多例模式下，彼此并没有交集，一个请求创建一个对象，类变量彼此之间
    也是相互独立的没有交集的，所以多例模式下是线程安全的

    Q:基于多线程的猜想
    A:单个http请求，触发多线程代码，实际服务器触发多少线程(实际服务器触发的就是业务代码中的线程数，只不过这种线程并不是为了处理高并发，而是为了处理相关的业务逻辑)

    Q:基于单例模式下的高并发猜想
    A:每一个请求对应一个线程，多用户访问同一个方法时，每个方法生成独立的栈桢，不存在并发问题，只用设计成员
    变量的时候才会设计(不完整，如果在查询过程中查到同样的数据，然后进行操作，也会出现并发问题)

    Q:单核情况下有必要使用多线程程序吗
    A:单线程下也是可以考虑使用多线程程序的，因为多线程不仅仅是提高了CPU的使用率，也可以提高IO的使用效率，但是
    多线程下上下文的切换也是很大的开销

    Q:java工作内存的数据和栈桢中的数据以及堆中的数据是什么关系
    A:java工作内存中保存的应该是拷贝复制的共享变量的值，而栈帧中的局部变量表中保存的是堆中数据的引用
    栈帧的操作数栈就是对字节码操作数据不断的入栈出栈，数据的交互实际上就是线程本地内存和主内存之间的交互

    Q:volatile变量和普通变量之间的重排序可能会破坏volatile的内存语义，什么意思
    A:其实就是破坏了内存可见性，本来没有数据关联的两个操作做了重排序，可能会导致另一个线程读取的数据有误
    volatile对于读写的内存语义分别是置为无效和刷新到主内存，如果和普通变量发生了重排序就会导致本该置为无效的数据
    可能依旧有效，本该被刷新到内存中的数据并没有刷新到内存中，导致数据的错误



