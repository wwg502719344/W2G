1-基本流程
    1-当提交新任务到线程池
    1-1:判断-->线程池检查核心线程池中的线程是否都在执行任务-->如果不是，则创建工作线程-->如果是，则执行1-2
    1-2:前提-->核心线程都在执行任务-->判断:线程池判断工作队列是否已满-->如果线程没满，则将当前任务加入到队列中去-->如果满了，则1-3
    1-3:前提-->工作队列已满-->判断:线程池判断普通线程池中的线程是否都处在工作状态-->不是:创建一个新的线程来执行任务-->是:饱和策略来处理(rejectExecutedHandle)


    2-ThreadPoolExecutor的策略
    2-1:任务提交到线程池-->判断:核心线程数是否达到corePoolSize-->没达到:创建线程执行任务-->达到了:2-2
    2-2:将任务塞进任务队列中-->队列已满:新建线程(非核心线程)执行任务-->总线程数已满:抛出异常



2-常见线程池
    1-CachedThreadPool:可缓存线程池
    1-1:线程数量无限制
    1-2:有空闲线程就复用空闲线程，没有空闲线程就创建空闲线程
    1-3:一定程度上减小了创建删除线程的消耗

    2-fixedThreadPool:定长线程池
    2-1:控制最多可以有多少线程进行并发请求
    2-2:剩余的线程进入队列进行等待

    3-scheduledThreadPool:定长线程池
    3-1:支持定时及周期性执行任务

    4-singleThreadExecutor:单线程化的线程池
    4-1始终有且只有一个工作线程执行任务
    4-2始终按照指定的顺序执行任务



3-线程池创建线程源码实现理解
    1-工作线程:线程池创建线程后，会将线程封装成工作线程，工作线程在执行完任务后，会不断的从队列中获取任务去执行



4-线程池的核心参数与元素
    1:创建线程池所需的参数
    1-1:corePoolSize:核心线程数
    1-2:runnableTaskQueue:任务队列
    1-3:maximumPoolSize
    1-4:ThreadFactory
    1-5:RejectExcutionHandler



