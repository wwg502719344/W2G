1-通过ThreadPoolExecutor创建线程池
线程池的构造方法通过调用Executors类的方法去创建和返回一个线程工厂，在根据默认的参数和线程工厂和(被拒绝的处理程序??)创建一个。。。
ThreadPoolExecutor(线程池执行类)


2-通过的Executors创建线程池
通过的 Executors 创建的线程池已经为绝大多数的场景做了预配置
1-Executors.newCachedThreadPool()：无界线程池，可以进行自动线程回收
2-Executors.newFixedThreadPool(int)：固定线程池大小
3-Executors.newSingleThreadExecutor()：单个后台线程


3-关于线程池创建线程与corePoolSize和maximumPoolSize之间的关系
实际线程池中的线程数并不是初始化的时候就创建好的，而是当有任务提交的时候(执行execute方法)，线程池会去判断当前运行的线程数量是否达到
corePoolSize，如果不够则会创建线程，注意，是正在运行的线程，而不是所有的核心线程数


=============================================AbstractExecutorService=====================================================
4:FutureTask使用场景(线程池中)
在线程池当中，通过继承AbstractExecutorService类来达到异步处理任务的作用，在AbstractExecutorService类当中，大量的返回了futureTask对象...
futureTask用于异步执行任务或取消任务，通过调用run方法来执行相应的方法，之后获取数据可以通过get方法获取数据，run方法中通常也会进行set
操作将callable获取的返回值放入类中
参考:
https://blog.csdn.net/linchunquan/article/details/22382487
**Q**:FutureTask中run方法的调用发生在什么时候



5:关于ThreadPoolExecutor与FutureTask之间的关系
futureTask是通过将需要进行异步执行的数据通过实现类runnable和future类，在futureTask中异步调用执行相关类数据方法，获取异步执行的结果
所以futureTask应该是一个为了执行异步方法，并获取相关结果的类
类中包含了数据的实现逻辑，包含了run方法可直接调用,就是实际需要执行的任务/数据实现类
在线程池中，线程执行类ThreadPoolExecutor需要实现AbstractExecutorService类，
AbstractExecutorService类(该类中实现了ExecutorService接口，实现了Executor超级接口)，在该类的实现方法中，通过接受...
Runnable/callable的参数，返回fatureTask对象，而futureTask对象是为了实现异步数据的请求
初步判断，ThreadPoolExecutor是需要将执行任务设计成一个异步任务，且可以查询返回结果，所以在实现类中返回了futureTask(数据实现逻辑)
简单猜测，当线程池收到任务后，线程池会将任务封装成一个futureTask。然后在对这个异步任务进行执行
正常执行流程，线程池需要创建并返回一个ExecutorSercice，通过该对象的executor方法，开始执行futureTask对象
Q:在ThreadPoolExecutor执行executor方法的时候，是否会启动新的线程去执行相关方法
A:既然是executor方法，肯定是要线程执行起来的，所有启动线程的方法是在addWorker方法当中的，所以在线程池当中，线程的启动是在addWorker
当中的



***6***:关于线程池执行中各类及其所扮演角色的作用
ThreadPoolExecutor类->runWorker(Worker w):该方法主要是执行w中封装的Runnable对象
Worker->run()方法调用runWorker()方法，传递实现了Runnable接口的任务，该类中封装了任务和初始化创建的线程，run方法可通过该线程进行启动...
该方法调用runWorker(Worker w),最终实现Runnable对象，在该类中实现了getTask()，该方法使线程不停的去获取任务(在想想)
ThreadPoolExcutor类->通过调用addWork()实现创建一个work对象，封装传入的firstTask，并启动执行worker中的线程，该方法通过.start启动...
Worker中的run()方法
ThreadPoolExcutor类->调用execute方法，传入command(就是addWork()中的firstTask)，在工作线程小于核心线程及工作队列已满时，调用addWork()...
方法，该方法的作用是去实现传入的任务command
execute方法为所有线程池执行任务的入口，实际在使用中的时候，通常还会使用submit方法，这个方法和execute的区别是，它可以返回执行的结果







