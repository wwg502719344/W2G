P1-基本流程
    1-当提交新任务到线程池
        1-1:判断-->线程池检查核心线程池中的线程是否都在执行任务-->如果当前执行任务线程数少于核心线程，则创建线程执行任务
        1-2:前提-->当前线程数大于核心线程-->判断:线程池判断工作队列是否已满-->如果队列没满，则将当前任务加入到队列中去
        1-3:前提-->工作队列已满-->判断:当前线程有没有超过最大线程边界，如果超过了
        饱和策略来处理(rejectExecutedHandle)


    2-ThreadPoolExecutor的策略
        2-1:任务提交到线程池-->判断:核心线程数是否达到corePoolSize-->没达到:创建线程执行任务-->达到了:2-2
        2-2:将任务塞进任务队列中-->队列已满:判断是否达到最大线程边界，没有则新建线程(非核心线程)执行任务
        2-3:达到了线程最大边界则抛出异常



P2-常见线程池-通过executors工厂方法创建
    1-CachedThreadPool:可缓存线程池
        1-1:线程数量无限制
        1-2:有空闲线程就复用空闲线程，没有空闲线程就创建空闲线程
        1-3:一定程度上减小了创建删除线程的消耗

    2-fixedThreadPool:定长线程池
        2-1:控制最多可以有多少线程进行并发请求
        2-2:剩余的线程进入队列进行等待

    3-scheduledThreadPool:定长线程池
        3-1:支持定时及周期性执行任务

    4-singleThreadExecutor:单线程化的线程池
        4-1始终有且只有一个工作线程执行任务
        4-2始终按照指定的顺序执行任务



P3-线程池创建线程源码实现理解
    1-工作线程:线程池创建线程后，会将线程封装成工作线程，工作线程在执行完任务后，会不断的从队列中获取任务去执行



P4-线程池的核心参数与元素
    1:创建线程池所需的参数
        1-1:corePoolSize:核心线程数
        1-2:runnableTaskQueue:任务队列
        1-3:maximumPoolSize
        1-4:ThreadFactory
        1-5:RejectExcutionHandler


P5-通过ThreadPoolExecutor创建线程池
线程池的构造方法通过调用Executors类的方法去创建和返回一个线程工厂，在根据默认的参数和线程工厂和(被拒绝的处理程序??)创建一个。。。
ThreadPoolExecutor(线程池执行类)


P6-通过的Executors创建线程池
通过的 Executors 创建的线程池已经为绝大多数的场景做了预配置
1-Executors.newCachedThreadPool()：无界线程池，可以进行自动线程回收
2-Executors.newFixedThreadPool(int)：固定线程池大小
内部封装了一个无界队列，任务会一直存在队列中，不会在创建额外的线程，只有队列满了才会创建额外线程
3-Executors.newSingleThreadExecutor()：单个后台线程

==========================================源码内容分析===========================================================
说明:源码实现细节及细节解析参考ThreadPoolExecutor_source

内容：
P7:ThreadPoolExecutor基本构成
P8:线程池状态源码基本变量组成及解析
P9:ThreadPoolExecutor执行方法
P10:Worker组成及作用
P11:源码执行流程

P7:ThreadPoolExecutor继承了AbstractExecutorService类，AbstractExecutorService是executorService的实现类，。。。
executorService是executor的子接口,executorService创建线程池，在实现类中，通常是接受一个callable对象或是runnable对象，。。。
runnable会被处理最后返回一个future对象,而最终future的实现则是由futureTask来实现，futureTask中则会实现一个run方法，此处为一闭环

P8:线程池申明了一个特殊变量用来表示线程池中运行线程数量和线程池状态，还有表示当前线程池各个阶段状态的变量，以及获取当前状态的方法，
内部类Worker，用来执行任务

P9:
execute方法:调用execute方法将会根据线程池的状态去创建worker
1-当工作线程小于核心线程数的时候，调用addWorker方法创建worker
2-当工作线程的数量(大于核心线程数+小于最大线程数(isRunning(c)返回true可知)+可以加入到工作队列(workQueue)中)的时候，。。。
加入workQueue等待调度
3-当线程池中队列已经满了且当前工作线程＜最大总线程，将任务添加到addWork当中去
4-提交任务给handly处理

addWork()逻辑流程
第一部分:首先是对线程池状态对检测，检查线城池运行状态和线程池和工作线程数量相关
第二部分:启动执行worker里面的线程


P10:
1:Worker为addWork中构建的执行对象，Worker中包含了所需执行的线程，所以addWork()方法的本质也就是为了启动Worker中的线程
2:Worker的构造方法中，会创建一个基于Worker的线程引用，这个引用赋值给Worker类的变量thread，所以Worker类中的thread就是自己通过构造方法创建的
3:在addWorker()方法中，最终启动线程是t.start();实际启动的就是Worker中的线程，将会执行Worker类中的run()
4:Work类接受传递的Runnable，构造方法封装Runnable，并创建线程来执行接受的Runnable，核心方法是执行Work类中的run方法，。。。
run()调用了runWorker(),目的是在该方法中启动线程的执行，执行传递的Runnable


***P11***:线程池源码处理提交任务基本流程
1:线程池执行execute方法，没有返回值
情况一:当前线程数小于核心线程数，顺利执行
    1:线程池调用execute方法执行任务，线程池中线程数小于核心线程数，调用addWorker方法
    2:addWorker方法的目的是将当前任务包装成Worker对象并启动worker中的线程，在addWorker方法中首先是检测线程池状态和线程池中。。。
    线程数等情况，如果都符合情况，则构造Worker对象，构造过程主要是通过封装当前任务以及从线程工厂创建一个新的线程
    3:获取mainLock锁，在判断线程池状态是否已经关闭，如果没问题则将创建的w加入到workers中并启动w对象中的线程
    4:调用w对象中的run方法(runWorker方法)，获取w中的任务，并执行任务中的方法，如果任务已经执行完毕，则不断循环从workQueue。。。
    中获取任务并进行处理

情况二:当工作线程数量大于核心线程数
    1:检测当前线程池状态是否是可运行状态并将任务加入到等待队列中，成功后再次检测线程池状态，如果此时状态不可用，则将加入的任务移除。。。
    并执行拒绝策略
    2:检测当前可用线程，如果可用线程数是0，则构建一个空的线程(为什么会有这种情况?)，这时候空线程从队列中去获取之前的执行任务

情况三:核心池数量已满，队列已满，则创建一个非核心线程去执行任务
    1:如果失败则执行拒绝操作

2:线程池执行submit方法，有返回值
执行流程:线程对象调用submit方法提交任务(任务方法应重写call方法)，调用实现了AbstractExecutorService类的submit方法，该方法。。。
返回一个FutureTask对象，然后调用execute方法，流程如上，最终在执行runWorker的task.run()时，执行的是futureTask的run方法。。。
在futureTask的run方法中则会调用重写的call方法


P12:关于实例详解
1，由于线程预启动，首先创建了1，2号线程，然后task1，task2被执行；
2，但任务提交没有结束，此时任务task3，task6到达发现核心线程已经满了，进入等待队列；
3，等待队列满后创建任务线程3，4执行任务task3，task6，同时task4，task5进入队列；
4，此时创建线程数（4）等于最大线程数，且队列已满，所以7，8，9，10任务被拒绝；
5，任务执行完毕后回头来执行task4，task5，队列清空。
需要注意的是，只有当队列已满且线程数最大的时候才会执行拒绝逻辑
P12-1
在源码执行的过程中，通过调试发现，如果我们将线程执行的时间设置的很长，观察任务入队列的
情况可得，线程加入队列并不会启动线程，真正启动线程的是最后当队列满后才会执行的addWork
的方法,所以当线程执行的时间很长的情况下，队列又是非常大，那么只有核心线程才能执行对应的
任务
核心线程执行任务，核心满
任务加入队列，队列满
启动工作线程，最大线程满
拒绝执行

P20:建议查看的文章

0:线程基本知识概要，设计所有线程必须掌握的基础知识，建议通读
https://mp.weixin.qq.com/s/mA59X7bOotyWwvf2V6zMIA

1：源码方法注释翻译
https://blog.csdn.net/iromkoear/article/details/66016153

2:源码解析
https://blog.csdn.net/xiongyouqiang/article/details/79456030
https://segmentfault.com/a/1190000013252252
https://blog.csdn.net/Ch97CKd/article/details/80745137

3:占小狼博客
https://www.jianshu.com/p/87bff5cc8d8c

4:，核心线程和非核心线程的区别对待，keepAliveTime的作用
https://blog.csdn.net/notonlyrush/article/details/78737425

5:如何终止线程池以及Worker继承AQS的目的
https://www.cnblogs.com/trust-freedom/p/6693601.html


***6:线程池运行逻辑***
该文章通过实例讲解了线程池对任务的完整处理逻辑，实例ThreadPoolTest
P12详解
https://www.jianshu.com/p/f030aa5d7a28

