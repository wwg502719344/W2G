
============================================QUESTION===========================================
Q0:为什么要使用线程池


Q1:线程数和核心线程数有什么关系？


Q2:线程池中的核心线程是如何循环利用的，如何启用闲置线程


Q3:线程池如何控制线程最大并发数


Q4:线程池如何实现延时执行、定时循环执行的策略等


Q5:线程池检查核心线程池中,如果线程没有全部执行任务，为什么不是利用闲置的而是创建新的线程呢？


Q6:常见四种线程池是源码中默认给出的还是独立的四个源码类


Q7:根据corePoolSize的解释，当有新任务的时候线程池就会创建一个新线程，即使其他空闲的基本线程可以执行任务也会创建
，这里的基本线程指的是核心线程还是非核心线程？为什么不让空闲线程执行任务？只有当任务数量大于线程数量的时候才会停止
创建，这里更奇怪，当任务数量大于线程数量的时候不是更应该创建线程吗


Q8:在Executor的实现类中，是如何实现executor方法的，和传统的创建Thread，实现Runnable有什么区别
============================================ANSWER=============================================
A0:当创建一个线程和销毁一个线程所需要的时间大于这个线程的执行时间，那么这就是一个资源上的浪费，线程池中保存了空闲的线程，
可以利用空闲的线程，避免创建销毁的资源浪费


A1:核心线程数corePoolSize,指的是当线程数量少于corePoolSize的时候，所有创建的线程都是核心线程(需要获取全局锁),
当大于线程数的时候，创建的线程就是非核心线程
核心线程创建完成后会一直存活，如果没有相应的任务，则会标记为空闲状态
如果指定的allowCoreThreadTimeOut被设置为ture，表示在一定的时间范围后，如果不干活将会被注销
参考资料:
https://liuzho.github.io/2017/04/17/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%8C%E8%BF%99%E4%B8%80%E7%AF%87%E6%88%96%E8%AE%B8%E5%B0%B1%E5%A4%9F%E4%BA%86/


A7:这里的基本线程指的应该是非核心线程，当核心线程的数量没有达到核心线程数的时候，会一直增加线程，任务数量应该是大于
核心线程数量的时候，这时候应该才是停止创建核心线程---------------------------------------------以上均为猜测


A8:其实我们应该理解为这是一个解耦的行为，对于异步程序，我们需要创建线程类，在实现中我们需要实现runnable方法，所以Thread和Runnable
创建异步任务属于紧耦合，Executor的场景往往在生产-消费模式中，无论是异步的还是同步的，我们只需要将需要执行的类封装成一个Task，。。。
交给executor方法，具体任务的实现则由实现类决定，比如实现类中启动一个线程，或是实现runnable接口方法
A8-1:严格来说executor是一种执行思路，本身和异步任务无关，但是executor本身接受的参数是Runnable，即是实现了Runnable接口的，所以
executor是一种异步任务的解决方案-思路
A8-2:调用该线程的方法，则会在这个线程中提交这个task，至于这个task要怎么执行，都不做要求，提交线程的方法只负责把task提交出去，等会能...
取到结构就行
参考:executor的理解(该博客较丰富的介绍了executor，值得通读)
https://blog.csdn.net/LWJdear/article/details/77048501
参考:较为详细的介绍了Executor的作用和使用场景
http://www.idouba.net/power-of-java-concurrency-executor/
