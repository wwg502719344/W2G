定义:
   索引是帮助mysql进行高效查询的数据结构


mysql的索引类型
    NORMAL：表示普通索引
    UNIQUE：表示唯一索引，常用作唯一性检索，该索引在数据库中不能存在相同的数据
    FULLTEXT:用于全文索引,可用作全文检索，可在查询语句中使用MATCH()…AGAINS进行搜索


索引的方式：
    二叉树方式(非真实采用，仅是一种对索引的理解，思路)
    数据库的物理地址存放数据信息，索引可以维护一个二叉树，每个节点包含索引键值和物理地址的指针应用，可以通过高效搜索算法
找到对应的数据

    B-TREE
    定义一条数据记录为一个二元组[key,data]，key为记录的键值，data为键值对应的数据
    查找算法是二分查找
    叶子结点指的是没有子节点的节点


主存存取原理
    主存的定义是随机读写存储器(RAM)，主存是一系列存储单元组成的矩阵，每一个存储单元都有相对应的地址和存储数据
    系统中获取主存数据是通过将地址信息放在地址总线上，主存通过指定的地址找到对应的单元格，取出相应的数据后通过数据总线
将数据提供给其他部件使用


磁盘存取原理
    索引一般以文件形式存储在磁盘当中，检索索引需要进行磁盘IO操作，但是磁盘IO操作是非常消耗时间的，B树降低磁盘IO操作次数更好一些


局部预读性处理
    因为磁盘IO是非常耗时的操作，计算机系统也做了很多优化，在每次读取指定地址的数据的时候，也会把临近地址的数据读取并存储在内存当中
这就是局部预读性处理


B+树的索引搜索
    B+树分成3层结构(理解上，下同)，数据只存在于叶子结点，那么磁盘IO操作也就是3次(一般根节点都会保存在内存中，故不需要进行磁盘的IO)，
实际层数，假设当前数据表的数据为N个，每个磁盘块的数据项的数量是M个，则树高 H = log(M + 1)N


B+树的查找方式(3层结构为例)
    假如我们要查找数据value，首先会通过磁盘IO加载第一层的磁盘(通常根磁盘会缓存在内存中)，通过数据库的特定算法，找到数据value所在范围
的指针P1
    通过指针P1找到第二层所在的磁块，此处需要进行一次磁盘IO，重复第一步的过程，找到对应的指针P2
    最后我们通过指针P2找到所需的磁块，然后加载到内存中，在通过指定的查找算法找到我们所需要的数据


B+树索引和hash索引(有待继续研究)
B+树索引采用的是平衡的多叉树，内部是已经拍好序的，从根节点到叶子节点的搜索效率基本相当
hash索引:是将键值转换成hash值，检索时不需要逐级的去查看，只需一次hash算法就可以定位值

索引的位置
索引是存放在磁盘当中的，用的时候会将数据取到内存当中，但不会全部读取到内存中，而是预读
一般的数据库索引采用的是B+tree的数据结构
https://www.jianshu.com/p/870c9f0710c6


对索引的理解
    索引是一种数据结构，这种数据结构是为了满足特定的搜索算法，就好比二分法要求数据有序，二叉查找只能应用在二叉树上一样
    因为索引是采用了特定的B+TREE的数据结构，在搜索的时候速度要比普通查询快很多
    是完全独立于基础数据之外的一部分数据，索引存储在磁盘中，数据会读写到内存当中

    主键索引是以主键id


单个索引使用功效
建立索引后，字段关联了主键ID，通过遍历索引字段的B+树，找到所属ID，回表获取对应ID下的数据，这其中发生了一次回表的过程


联合索引
1：最左使用原则:
例如对col1,2,3建立索引
KEY test_col1_col2_col3 on test(col1,col2,col3);
实际上相当于建立了三个索引(col1)、(col1,col2)、(col,col2,col3)
只要你的查询条件中带有col1，那么都可以使用索引，节省创建索引的成本
2：覆盖索引
如果查询结果中全部都是联合索引的字段，那么就可以不需要进行回表操作，减少磁盘IO，提高效率
3：索引下推
在mysql5.6之后，在联合索引的条件中，满足索引一的前提下会对索引二进行检索，减少回表次数，
在5.6之前，满足索引一会返回主键索引进行一次回表



优点：
1-减少磁盘的开销，建立一个联合索引相当于建立了多个单个索引
Q:为什么说建立索引很消耗磁盘开销
A:是把排序后组织成B树的数据，放到磁盘上，才有了索引

2-覆盖索引，直接通过索引获取数据，避免回表减少IO操作

3-提高效率，在多个条件查询的时候，需要回表查找数据，效率相比较而言要低很多


联合索引如何减少回表操作
通过将所有要查询的字段值建立在联合索引当中，当我们查询到其中一个字段值的时候，已经包含另一个字段的值，这时候就不需要回到主表重新去
根据主键去定位数据所在的行数

联合索引的B+树结构，最左原则，应该是先从最左边进行遍历，查到数据后再依次进行相关遍历

缺点:
占用内存
资源消耗增大

任何更新被设置为索引的字段的操作，都需要重新构建索引结构



为什么要建立索引
https://www.jianshu.com/p/73a9a1b1575c