跨域的出现
在前后端未进行分离的时候，所有请求的发送和接受均是在同一个域名下，不会存在跨域的请求，当前后端发生分离后，前后端独立部署，前端在发送请求
需要遵守浏览器的同源策略，同源策略是浏览器上为安全性考虑实施的非常重要的安全策略。

什么是同源策略
从一个域上加载的脚本不允许访问另外一个域的文档属性(协议+域名+端口)
针对的请求类型是:XmlHttpRequest(xhr)请求(AJAX)，
只有这两种类型的请求才会有跨域限制，普通的请求静态资源并不会发生跨域

解决方案
1：在浏览器中去除跨域限制，缺点就是不可能为所有用户的浏览器去除跨域限制
2：使用jsonp进行数据的传送，缺点就是前后端都需要作出修改，且jsonp只支持get请求
3：在后端nginx中添加过滤器，允许请求方法进行跨域


跨域资源共享（CORS）
XMLHttpRequest可以向不同域名的服务器发出HTTP请求，申明允许客户端请求来源访问服务器，但正常情况下
会要求浏览器发送预发送请求(option请求)
可以进行CORS有两个条件:
1)浏览器要支持CORS
2)服务器允许跨域：响应头需要添加一下选项
Access-Control-Allow-Origin: 允许跨域访问的域，可以是一个域的列表，也可以是通配符"*"。
这里要注意Origin规则只对域名有效，并不会对子目录有效。
该服务器可以接受任意客户端(浏览器或是其他服务器)发来的请求

Q:前后端分离后为什么会产生跨域问题
A:浏览器对于不同域下的请求默认是无法接受到数据的，受到跨域的限制，原因就是前后端分离后，前端也有
自己的页面资源地址，这些地址和服务器接口的地址在端口上是冲突的，这就导致跨域问题的产生，比如
前端地址是：http://localhost:8081 (vue)
后端地址是：http://localhost:8080 (spring boot 项目)
端口不同产生跨域的问题

Q:前端跨域可通过在nginx中进行配置接触跨域
A:跨域资源共享（CORS）
XMLHttpRequest可以向不同域名的服务器发出HTTP请求，叫做CORS
可以进行CORS有两个条件:
1)浏览器要支持CORS
2)服务器允许跨域：响应头需要添加一下选项
Access-Control-Allow-Origin: 允许跨域访问的域，可以是一个域的列表，也可以是通配符"*"。
这里要注意Origin规则只对域名有效，并不会对子目录有效。
该服务器可以接受任意服务器发来的请求



cors(跨域资源共享)
https://www.cnblogs.com/shikyoh/p/4959562.html