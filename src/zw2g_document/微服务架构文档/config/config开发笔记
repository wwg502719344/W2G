1-构建config server
    1-1引入相关maven依赖
    1-2添加启动项注解，编写yml文件(此处添加注解@EnableConfigServer的时候无法加上，后来突然就好了，原因未知)
    1-3通过端点方式访问git上的配置文件(此处需要注意的是application与profile通过-进行连接)
    http://localhost:8400/{application}-{profile}.properties
    1-4通过上文的方式进行映射访问git地址的配置文件，但是有一些配置文件没有用-进行连接，这时候通过上面的方法就无法进行访问了
    解决方案
    http://localhost:8400/{application}-{application}.properties
    http://localhost:8400/cloud-任意值(不可为空).properties,即可访问cloud.properties中的内容


2-构建config client，获取config server的相关配置
    2-1引入相关maven依赖
    2-2创建bootstrap.yml文件，配置获取config server的相关参数
    #bootstrap.yml的加载顺序要优先于qpplication.yml文件，因为在项目启动的时候，会主动去拉取8888的服务，此处需要通过配置
    --文件进行覆盖,否则在打包的时候@Value也会报错，显示非法加载应用程序失败，因为此处需要优先加载uri地址内容
    --因为bootstrap.yml会优先加载，所以会先去github配置中心获取信息
    #此处配置的内容皆是对应config server中指定的git文件的存储地址
    #spring.application.name对应{application}
    #spring.cloud.config.url对应config server的访问ip:端口
    #spring.cloud.config.profile对应{profile}
    #spring.cloud.config.label对应git分支
    spring:
      application:
        name: cloud
      cloud:
        config:
          #默认是8888，并且会覆盖application.yml文件的配置,此处不添加uri，启动日志中会去找8888
          uri: http://localhost:8400
          profile: dev
          label: master

    2-3创建访问方法，获取指定文件内容
    @Value("${profile}")

    M1:maven打包过程报错，提示非法的参数格式，并指出是@Value的错误，
    实际期待结果:启动不报错，且访问可以获取git指定配置文件的内容
    -出现问题后，首先我是将路径补全，补全后启动不再报错，但是在执行后是读取的profile的具体的值
    -后来我将注解重新改成profile，又不报错了，而且再次访问，结果并不是profile的值

    M2:启动服务报错，出现此错误的原因是在依赖的maven包中，我们需要将
    spring-boot-starter替换成spring-boot-starter-web


3-构建配置文件刷新
    手动调用接口实现git配置文件的刷新
    3-1控制器添加相关注解
    @RefreshScope

    3-2通过IP:PORT/actuator/refresh的方式请求刷新配置文件
    M1:此处我在刷新的时候发现404，原因是springboot2.0以后，需要在配置文件中开放访问端口
    management:
      endpoint:
        refresh:
          enabled: true
      endpoints:
        web:
          exposure:
            include: refresh,health,info
    参考资料(内附Spring Boot 2.0官方文档之 Actuator)
    https://blog.csdn.net/qq_27101653/article/details/80816036

