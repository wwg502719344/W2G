1-构建config server
    1-1引入相关maven依赖

    1-2添加启动项注解，编写yml文件(此处添加注解@EnableConfigServer的时候无法加上，后来突然就好了，原因未知)

    1-3通过端点方式访问git上的配置文件(此处需要注意的是application与profile通过-进行连接)
    http://localhost:8400/{application}-{profile}.properties

    1-4:关于配置文件的命名方式:
    此处需要注意的是，我们在对配置文件的命名中因尽量规范，建议使用
    {application}-{profile}.{properties|yml}，这种方式，方便我们对配置文件进行访问
    配置文件的命名还需要注意的是，谁用这个配置文件，那么这个配置文件就命名为该服务(config-client)
    @Value时需要指定具体配置文件中的路径名称，因为如果在config-client中配置了多个profile，那么
    找到指定的配置信息需要路径是唯一的
    @Value("${dev.profile}")
    这里找的就是cloud-dev.yml中dev.profile的信息

    1-5:通过上文的方式进行映射访问git地址的配置文件，但是有一些配置文件没有用-进行连接，这时候通过上面的方法就无法进行访问了
    解决方案
    http://localhost:8400/{application}-{application}.properties
    http://localhost:8400/配置文件名称.properties,即可访问cloud.properties中的内容，但是
    需要注意的是，如果配置文件名称中没有-，那么在访问的时候会直接找默认配置



2-构建config client，获取config server的相关配置
    2-1引入相关maven依赖
    2-2创建bootstrap.yml文件，配置获取config server的相关参数
    bootstrap.yml的加载顺序要优先于application.yml文件，因为在项目启动的时候，会主动去拉取8888的服务，此处需要通过配置
    --文件进行覆盖,否则在打包的时候@Value也会报错，显示非法加载应用程序失败，因为此处需要优先加载uri地址内容
    --因为bootstrap.yml会优先加载，所以会先去github配置中心获取信息
    此处配置的内容皆是对应config server中指定的git文件的存储地址
    spring.application.name对应{application}
    spring.cloud.config.url对应config server的访问ip:端口
    spring.cloud.config.profile对应{profile}
    spring.cloud.config.label对应git分支
    spring:
      application:
        name: cloud
      cloud:
        config:
          #默认是8888，并且会覆盖application.yml文件的配置,此处不添加uri，启动日志中会去找8888
          uri: http://localhost:8400
          profile: dev
          label: master

    2-3创建访问方法，获取指定文件内容
    @Value("${profile}")
    除此之外，还有其余方式可以访问
    https://www.cnblogs.com/zuowj/p/10432445.html#s-1.4

    M1:maven打包过程报错，提示非法的参数格式，并指出是@Value的错误，
    实际期待结果:启动不报错，且访问可以获取git指定配置文件的内容
    -出现问题后，首先我是将路径补全，补全后启动不再报错，但是在执行后是读取的profile的具体的值
    -后来我将注解重新改成profile，又不报错了，而且再次访问，结果并不是profile的值

    M2:启动服务报错，出现此错误的原因是在依赖的maven包中，我们需要将
    spring-boot-starter替换成spring-boot-starter-web


3-构建配置文件刷新
    手动调用接口实现git配置文件的刷新
    3-1控制器添加相关注解
    @RefreshScope

    3-2通过IP:PORT/actuator/refresh的方式请求刷新配置文件
    M1:此处我在刷新的时候发现404，原因是springboot2.0以后，需要在配置文件中开放访问端口
    management:
      endpoint:
        refresh:
          enabled: true
      endpoints:
        web:
          exposure:
            include: refresh,health,info
    参考资料(内附Spring Boot 2.0官方文档之 Actuator)
    https://blog.csdn.net/qq_27101653/article/details/80816036


4- 实现config bus自动刷新git配置文件,
   目标:模拟多台config-client，通过请求其中一台服务的配置刷新，达到所有服务器对配置文件的刷新读取
   该方式需要结合github hooks+bus+mq，则可以实现配置修改实时刷新项目获取配置文件(有待研究hooks)

4-1安装rabbitmq

   我使用的是docker安装mq，非常简单，具体方式如下，
   docker基本命令
   https://www.cnblogs.com/hackyo/p/9318252.html

   M1:此处建议启动mq的时候创建账号，因为guest只支持本地访问
   所以我创建了一个账号user，密码123456的账号
   M2:我在启动服务后，一直无法在网页访问mq，原因是我服务器没有设置安全组，将5672和15672的端口添加进安全组
   过一段时间，访问成功

4-2引入轻量级消息代理连接分布式消息节点，用来传播配置文件的更改，这里我们用的是rabbitmq
   4-2-1:添加bus相关依赖
   <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-bus-amqp</artifactId>
   </dependency>

   4-2-2:在bootstrap配置文件中添加mq配置信息，我自己是在application配置文件中添加，因为我是配置多端点的，所以配置信息我写了两边
   spring:
     rabbitmq:
         host: 服务器IP
         port: 5672
         username:
         password:

4-3添加新端点，即新的微服务，此处用端口进行模拟，分别用两个端口启动微服务，达到启用两个微服务的效果
   spring:
     profiles: peer1
   server:
     port: 8401
   ---
   spring:
     profiles: peer2
   server:
     port: 8402

   启动参数修改
   --spring.profiles.active=peer1

4-4:此时启动多个服务，我们修改配置文件并向其中一个服务发送更新请求
   http://localhost:8401/actuator/bus-refresh
   此处需要格外注意的就是自从speingboot升至2.0后，actuator做了大量的修改，此时我们需要在配置文件中开放端口才能
   进行访问，否则会报404错误
   management:
     endpoint:
       refresh:
         enabled: true
     endpoints:
       web:
         exposure:
           include: refresh,health,info,bus-refresh

   此时我们访问另一台服务器，发现配置文件已经更新了
   http://localhost:8402/profile


5:将config注册到服务发现组件当中
   5-1:添加eurekaClient依赖，在启动类添加注解将config server设置为Eureka Client，在application添加
   注册配置，这里需要注意的是，对于config client微服务，需要在bootstrap文件中配置eureka,从服务发现组件中
   去寻找config server的地址
   ***M1***:在配置完成后，对config client进行打包，打包启动的时候会去加载bootstrap配置文件，如果
   会去加载默认端口8888的配置服务，但是我的配置是8400，故
   配置加载失败，此处应该是从eureka中读取config server的地址进行加载，但是并没有，这里我的配置基本也没有错，
   不清楚失败的原因，下面是配置文件读取的地址
   Fetching config from server at : http://localhost:8888

   ***S1***:
   初次解决方案：
   操作一:将当前config client/server的pom文件进行修改，改成低于2.0版本的，此时启动依旧报错
   操作二:将demo的config client指向我的server,可以启动成功，说明是我的config client出现了问题
   操作三:将我的client指向 demo的conofig server，启动失败，证明是我的config client有问题
   操作四:改造config client，配置，代码完全一样，依旧无法启动成功，原因不明。。。
   操作五；拷贝demo项目至自己的文件下，改造成2.0以上版本，可以进行访问

