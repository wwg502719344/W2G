动态代理:
首先通过反射的方式生成代理类,就是通过proxy的newInstant方法生成一个代理对象，
在这个代理对象执行方法的时候，则会触发invocation中的代理方法
好比西甲联赛，如果想让中国的观众看到西甲比赛并获取收益，则需要寻找一个中国的代理人，将比赛视频(实例对象)
交给中国市场的代理人(通过proxy的newInstant方法生成代理对象)，PPTV则是最后的代理对象，球迷在通过PPTV
观看比赛的时候，首先要先看广告，这个广告则是代理对象PPTV中的观看西甲比赛则要触发的收益方法，这就是动态
代理的逻辑

动态代理和静态代理的区别在于静态proxy需要自己去生成一个代理类，而动态proxy则是通过反射去生成代理类

完成动态代理的核心代码:
NewProxyInstance相关类极其源码
Proxy:创建一个代理对象，该代理对象进行相关方法的调用
newInstance:生成代理对象的方法，该方法内自定义方法，调用方法的时候需要执行代理方法
ClassLoader:传参，构造器类
interface:传参，相关接口
InvocationHandler:传参，绑定执行方法


feign调用逻辑
封装了http的调用逻辑，使之成为面向接口的方式进行调用
feign的本质则是通过将请求接口的信息封装进实体中，通过http协议框架发送http请求，feign使用的是httpurlConnection

phase1:target动态生成实现类
// 基于Proxy.newProxyInstance 为接口类创建动态实现，将所有的请求转换给InvocationHandler 处理。
T proxy = (T) Proxy.newProxyInstance(target.type().getClassLoader(), new Class<?>[]{target.type()}, handler);
该阶段的主要目的是动态代理生成实现类，invocationHandler是在原方法被调用的时候绑定执行自己的方法

phase2:解析接口，生成相应元数据
通过feign注解进行解析，获取到相关的数据，feign有一套自己的注解方式，也可以修改成mvc的

phase3:获取数据，封装request

phase4,5,6,7:一些数据组织工作

phase8:发送http请求
feign内部默认使用httpUrlConnection方式发送http请求，但是这种方式效率比较低下




feign设计原理:
https://www.jianshu.com/p/8c7b92b4396c

动态代理相关基础讲解:
https://www.jianshu.com/p/95970b089360

注解@EnableFeignClients工作原理
https://blog.csdn.net/andy_zhang2007/article/details/86680622
