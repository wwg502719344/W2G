1-为服务消费者添加ribbon依赖
 <!--ribbon负载均衡-->
 <dependency>
     <groupId>org.springframework.cloud</groupId>
     <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
 </dependency>

1-2:在使用ribbon进行负载均衡的时候需要注意，被转发的服务在对eureka进行注册的时候，需要保证
注册到eureka服务端的spring.application.name是相同的，否则就相当于两个微服务

2-整合负载均衡的能力
    2-1:Spring cloud 中服务之间通过restful方式调用有两种方式
        - restTemplate+Ribbon
        - feign(该方式使用更为优雅，内部封装了ribbon)

    2-2:ribbon的负载均衡和zuul的负载均衡之间的异同
        ribbon针对的是服务内部的调用(eureka上注册的服务)，属于服务之间的负载均衡，需要自己构建http请求,调用请求地址
        feign封装了ribbon，直接取调用生产者的接口地址(调用的是一个抽象方法)
        zuul针对的是外部请求,基于客户端对服务端的访问，是外部请求之间的负载均衡,zuul的实现包括了ribbon


    2-3:使用cloud commons提供的与服务治理相关的接口DiscoveryClient、LoadBalancerClient
        1:在restTemplate+Ribbon的负载方式中，restTemplate被添加了注解@LoadBalanced
        意味着现在就可以实现负载均衡的处理了
        2:创建配置类，实现自定义负载均衡策略，通过@RibbonClient引入自定义配置的负载均衡类，
        在控制器中就可以通过负载均衡的客户端获取服务器的相关信息。


3ribbon与feign的关系
feign也具备负载均衡的作用，feign内部已经融合了ribbon服务，通过feign调用服务提供者，会将请求分发至
具有相同application-name的提供者服务上
feign通过调用接口的方式进行请求，通过@FeignClient(name="new-user")进行服务的调用


4ribbon实现负载均衡的原理
ribbon内部提供了一个ILoadBalance接口提供代表负载均衡器的操作，服务的添加，服务的选择，
获取所有服务器列表等

ILoadBalanced:通过获取eureka中的服务实例来建立服务列表，并保持联系，具体的负载均衡
则由核心组件IRule来实现

IRule:通过固定算法从服务器列表中选取一个要访问的服务器，默认算法为轮询
基本算法有权重，轮询，随机，最小访问数






ribbon实现负载均衡的底层原理
https://blog.csdn.net/wudiyong22/article/details/80829808