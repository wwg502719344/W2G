0:通篇阅读
https://www.cnblogs.com/zuowj/p/10645189.html#s-2.8

1-创建zuul项目，通过zuul进行路由管理，代理微服务，客户端只需要设置好请求路径即可访问相关微服务接口
2-添加相关依赖，启动项添加启动zuul注解
@EnableZuulProxy
3-在zuul中添加配置文件进行路由配置
3-1域名映射
通过zuul可以使得我们通过访问网关的方式访问相关的微服务，比如
http://localhost:8400/new-movie/userBack/1
我们访问网关的IP:端口，后面跟上具体微服务的serverid+相关方法，实际上，我们可以将serverid进行路径映射
zuul:
  routes:
    new-movie: /movie/**
或
zuul:
  routes:
    user-route:
      service-id: new-movie
      path: /movie/**

通过这种方式，我们就成功将new-movie映射到movie路径下了
http://localhost:8400/movie/userBack/1
实际上如果不进行path->service-id的配置，也是可以直接进行访问的
http://localhost:8400/new-movie/userBack/1

可以指定需要访问的微服务或是需要忽略的微服务
zuul:
  routes:
    user-route:
      service-id: new-movie
      path: /feignsFallBack/**
但如果使用了这种方式进行路由配置，则会导致ribbon/hystrix无法工作,但仅仅只是无法使用HystrixCommand,正常
下应该是使用feign进行容灾等操作,无法使用HystrixCommand也就无法正常使用熔断器和降级


3-2:通过端点监控查看zuul地址到微服务的路径映射
注意此处需要添加actuator相关依赖，并在yml文件中开放访问端点，然后对路径进行请求查看映射
http://localhost:8400/actuator/routes

4-如果需要指定path，url，根据官方文档描述会破坏ribbon/hystrix的特性，但我自己在测试的过程中发现
被hystrixCommand包裹的方法还是可以进行fallback处理，此处留有疑问
A:因为我使用的是@Enablezuulproxy注解，提供的过滤器支持ribbon，hystrix等功能


首先需要注意的是我们是将服务提供者的serverid配置在yml中，并且配置连接的端口，而不是服务的消费者
在将此处改正后，我发现任然无法触发服务降级，后台并报错
com.netflix.client.ClientException: Load balancer does not have available server for client
没有可用的负载均衡提供，于是我对书中的代码做了改动
ribbon:
  eureka:
    enabled: ture
再次启动，请求降级


5-基于zuul实现过滤器功能
5-1自定义网关过滤器，需要自定义类实现zuulFilter
5-2网关类的写法可以参照cloud官方文档的写法
详细见zuul项目下的MyFallbackProvider类

5-3在启动类中注入自定义过滤类
Q5-1:在每一个网关类中都会写好过滤类型，是否意味着一个自定义过滤类只能实现一种过滤类型
A5-1:每一个自定义网关类只能对应一种fileType，在官方文档上，针对不同的过滤类型给出了不同的demo

Q5-2:在一个自定义过滤类中，可以根据请求不同微服务进行特定过滤吗，还是说只能进行统一的过滤
A5-2:，基于代码对请求路径的判断，代码参考
@Override
public Object run() {
    RequestContext ctx = RequestContext.getCurrentContext();
    HttpServletRequest request = ctx.getRequest();
    if (request.getParameter("foo") != null) {
        // put the serviceId in `RequestContext`
        ctx.put(SERVICE_ID_KEY, request.getParameter("foo"));
    }
    return null;
}
此处需要注意的是，foo是一个传递的参数，并不是我之前想的直接从路径地址中获取请求的 微服务，这种方式也是官方不推荐的

6-基于zuul实现回退功能
6-1回退类需要实现FallbackProvider接口，此处需要注意的是官网给出的demo是zuulFallbackProvider，但在F版中，已经没有这个接口了
6-2具体实现按照官方文档的方式抒写就可以了，最后访问，如果服务已经挂掉了，就会返回指定的信息
Q6-1:在回退类中，是否可以指定多个回退类，一个类只能指定一个微服务进行回退，太低效了
A6-1:可以，方式同上



7-实现动态配置路由跳转
    7-1:通过db的方式实现动态路由(牛逼)
    7-1-1:添加相关注解，因为使用了数据库，所以此处需要添加数据库查询相关的maven
    <dependency>
    	<groupId>com.alexkasko.springjdbc</groupId>
    	<artifactId>springjdbc-iterable</artifactId>
    	<version>1.0.3</version>
    </dependency>


    <!--springboot建立数据库连接-->
    <dependency>
    	<groupId>mysql</groupId>
    	<artifactId>mysql-connector-java</artifactId>
    	<scope>runtime</scope>
    </dependency>

    <!-- druid阿里巴巴数据库连接池 -->
    <dependency>
    	<groupId>com.alibaba</groupId>
    	<artifactId>druid</artifactId>
    	<version>1.0.26</version>
    </dependency>

    7-1-2:添加修改类,核心理解就是我们替换了读取路由配置的地方，使项目在启动的时候率先加载我们配置的路由
    @Component
    public class CustomRouteLocator extends SimpleRouteLocator implements RefreshableRouteLocator
    {
        ...
    }

    7-1-3:实现动态刷新,核心理解就是通过事件通知告知zuul重新拉取配置数据
    @GetMapping("/refreshRoute")
    public void refreshRoute() {
        RoutesRefreshedEvent routesRefreshedEvent = new RoutesRefreshedEvent(routeLocator);
        publisher.publishEvent(routesRefreshedEvent);
    }

    7-1-4:
    //查看可用路由，看我们配置的路由有没有被加载
    http://localhost:8400/actuator/routes
    //根据我们配置的路由进行访问
    http://localhost:8400/user/test
    //刷新路由配置(本质是访问实时刷新的方法，这里我改成api方便进行访问)
    http://localhost:8400/refreshRoute


    7-2:通过配置文件进行动态路由(待研究)
        ...


8:Zuul 实现限流：https://www.cnblogs.com/tiancai/p/9623063.html
    ...

9:Zuul 超时、重试、并发参数设置：https://blog.csdn.net/xx326664162/article/details/83625104
    ...