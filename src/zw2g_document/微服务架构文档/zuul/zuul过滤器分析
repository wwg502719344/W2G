基于netty服务器，运行inboundFilter过滤器，由netty客户端代理这些路由请求

netty服务器的优势
----java NIO的http服务器与netty服务器(搜索)

过滤器的几种基本形态
1-在路由前执行，用于权限校验，路由跳转等
2-静态类执行，不需要访问集群服务器，直接返回结果，类似熔断
3-在路由结束后执行
4-过滤器可选择是异步执行还是同步执行，实现方法是通过继承相关的HttpInboundFilter类实现



过滤器类型
0-基于过滤器类型的注解
@EnableZuulProxy和@EnableZuulServer是提供过滤功能的两种注解,@EnableZuulProxy是
@EnableZuulServer的加强版，当我们zuul需要结合ribbon，hystrix的时候，就需要使用注解
@EnableZuulProxy的相关方法了

1-基于@EnableZuulServer和@EnableZuulProxy过滤器的关系和区别
官网关于zuul过滤器的图建议好好看看，或是自己画的
http://www.itmuch.com/spring-cloud/zuul/spring-cloud-zuul-filter/

关注重点:route类型过滤器
请求转发过滤器，该过滤器获取请求地址(RequestContext.getCurrentContext().get("forward.to"))
设置请求路由，路由则是通过配置文件进行配置
在@enablezuulservr中只能满足普通的请求转发功能，在@enablezuulproxy中，引入的过滤器实现了ribbon
和hystrix，可以通过serverId进行请求转发

关系:
这两种注解都是zuul过滤器的注解，proxy可以看成是server的增强版，在基于server的功能上
添加了3个注解，我们在添加注解的时候使用@EnableZuulProxy就可以了，两者不是共存的，是非此即彼的关系

区别:
当我们的zuul需要与eureka，rabbion，hystrix共同使用的时候，我们就需要使用proxy
此处作用于配置文件，支出serviceId的请求转发方法
RibbonRoutingFilter:serviceId请求转发，该过滤器使用Ribbon，Hystrix和可插拔的HTTP客户端发送请求,
SimpleHostRoutingFilter:url请求转发




2-关于在过滤器中的各种http客户端
还不太懂

Q:okhttp和apache http的区别
A:发送请求的客户端，ok可以进行请求复用，拦截器，缓存等优点



过滤器实现限流
1-ratelimiter实现限流，类似AQS获取共享锁的方式，设定一个阈值，当指定时间内的共享变量被用完后，将阻塞执行
此处可参考《服务器限流》相关文章

2-redis实现限流，存储两个key，一个用于计时，一个用于计数，如果在指定时间内超过阈值，则拒绝处理任务

3-实现微服务级别的限流
    3-1:


参考文档:
zuul基础文档:
https://blog.csdn.net/weixin_43364172/article/details/82979749
ELB概念:
https://www.jianshu.com/p/9aae065353f6
http2和https的区别和历史:
https://www.cnblogs.com/Java3y/p/9392349.html
实现微服务级别的限流:
https://www.cnblogs.com/shamo89/p/8940606.html
zuul各种过滤器的作用:
https://www.cnblogs.com/okong/p/springcloud-ten.html
@EnableZuulServer、@EnableZuulProxy两个注解
https://www.cnblogs.com/lexiaofei/p/7098702.html