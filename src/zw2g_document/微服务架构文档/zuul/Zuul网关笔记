0:通篇阅读
https://www.cnblogs.com/zuowj/p/10645189.html#s-2.8

1-zuul基础概念
1-1:什么是zuul
zuul作为微服务系统的网关，统一接受来自客户端对服务的请求，zuul旨在实现动态路由，监控以及安全
此处需要注意的是，ribbon也可以实现请求的转发，但是面向的是服务与服务之间的调用

1-2:使用zuul的好处
避免客户端过于复杂的写法，针对不同服务进行不同的请求
避免跨域请求带来的问题
可以将所有微服务封装在一个内网环境中，减小客户端与微服务的交互
使用zuul更加易于监控
避免了在业务代码中对权限控制的处理，使得业务代码更纯粹

1-3:zuul在微服务中的具体作用
zuul对外提供统一的api请求地址，并且可以处理一些不涉及到业务的操作，比如权限过滤等，主要负载服务路由，负载均衡
等作用

1-4:zuul是怎么实现负载均衡的
zuul在加入到eureka中，唉eureka中有多个serverId，对路由的访问是通过轮询的方式进行访问

2:zuul进行路由控制
1-通过在yml文件中进行具体路由跳转逻辑，可以通过请求访问的url具体跳转到指点的微服务上(url的配置方式比较死)
2-zuul.routes是一个路径集合，包含了很多路径，可以进行自定义设置，用于指定路由(如果微服务过多，不会很乱吗)
配置微服务和路径的映射
zuul:
  host:
    connect-timeout-millis: 10000
    socket-timeout-millis: 60000
  routes:
    user-route:
      service-id: new-movie
      path: /movie/**

通过service-id的方式对请求路径进行控制，在高可用的情况下，可以不用在去配置zuul服务的url，
通常情况下都是使用这种方式进行zuul网关路由的配置

也可以通过actuator进行路由映射的查看
http://localhost:8400/actuator/routes

2-1:zuul实现eureka的负载均衡
通过http://localhost:8400/actuator/routes可以查看到zuul的可用路径，此处可以发现在高可用环境下是有多个
服务可用的

2-2:zuul的架构，两种zuul架构实现
2-2-1:在将zuul服务添加进eureka中的情况下
优点:zuul可以默认对eureka下的服务进行负载，比较方便
缺点:zuul加入到eureka中，也就变向的要求所有服务都加入到eureka中，这样才能对该服务进行负载和访问
2-2-2:zuul+nginx进行负载(通过在zuul中配置nginx访问地址)
优点:避免了服务的侵入性，通过访问zuul，由zuul发出请求访问nginx达到负载均衡的作用，使用该方法需要实现
服务的动态加载
缺点:丧失了zuul+eureka方式的便捷性，在实现了动态路由的情况下也需要将所有高可用都配置一遍，同时意味着
随着项目的增多，需要不断的添加nginx的配置

2-3:zuul发送请求访问微服务和zuul请求nginx在请求微服务的异同
zuul获取请求的路径，像这个路径发出请求，nginx可以接收到zuul发送的请求并实现路由跳转，
个人感觉这样一点都不好用，反而增加了nginx配置的复杂程度

3:zuul过滤器
zuul有四种过滤器，作用于请求时候的四个时候

3-1:自定义网关过滤类继承ZuulFilter，实现网关鉴权等作用，run方法实现过滤逻辑

3-2:实现FallbackProvider的实现类是为zuul提供的熔断回退类，当api不可用时，提供熔断降级处理，
zuul网关内部默认集成了Hystrix、Ribbon，在F版中需实现FallbackProvider类，
F版以前不是FallbackProvider



4:动态路由解析
在传统的zuul路由解析中，我们需要将路由配死在yml文件中，但这样的缺点很明显，随着项目的增加，我们
几乎每次添加一个路由都需要在配置文件中添加新的配置并且进行重启，通过动态路由配置，可以灵活的对配置
进行管理
4-1:通过自定义类继承SimpleRouteLocator实现RefreshableRouteLocator的方式灵活来管理路由，
路由存放在DB中，当新增或是修改DB中数据的时候，调用RefreshRouteService.refreshRoute刷新
配置，则可以读取到新的配置，无需重启项目

核心1:读取数据库配置路由地址并跳转,在simpleroutelocator类中，通过zuulProperties获取配置文件
核心修改:
    locateRoutes()，具体就是在这儿定位路由信息的，我们之后从数据库加载路由信息，主要也是从这儿改写
...该方法的主要作用就是加载配置文件，获取路由的对应关系

核心实现:
    getRoutes()方法中，根据locateRoutes()获取的map类型的路由定位器，
...通过simpleroutelocator类中的getRoutes方法，把定位的Routes以list的方式提供出去，这个list就是
之前配置文件中的配置路由，加载进内存当中进行路由的跳转，我们通过重写这个方法，从数据库中获取到新的路由地址
，并将这个路由地址以list的方式加载进内存中。
逻辑实现:getMatchingRoute()方法，可以根据实际路径匹配并返回getRoutes()中具体的Route来进行业务逻辑的操作

核心2:实现配置的实时刷新，这里需要提到另外一个类DiscoveryClientRouteLocator，它具备实时刷新的作用
原理:zuul中提供了路由刷新监听器的功能(onApplicationEvent())，在这个方法中如果事件是
...RoutesRefreshedEvent，下一次匹配到路径时，如果发现为脏，则会去刷新路由信息
方法:使用ApplicationEventPublisher，该类的作用是发布事件，也就是把某个事件告诉所有与这个事件相关的监听器
具体的刷新流程其实就是从数据库重新加载了一遍，具体的处理逻辑，还需要去解读源码才能明白

总结:
通过重写locateRoutes()方法，从数据库中获取相应的路由之间的映射关系，在通过监听的方式进行路由的刷新，重新获取
新的路由关系

需要注意的是，如果使用动态路由的方式，则需要关闭配置文件中的映射关系，以免动态路由被覆盖




笔记参考文档
https://www.cnblogs.com/zuowj/p/10645189.html#s-2.7 //全面解析zuul的使用和调用
https://github.com/lexburner/zuul-gateway-demo      //github上解析动态路由


5:服务之间通过zuul网关调用



