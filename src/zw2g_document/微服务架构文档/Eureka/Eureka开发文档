-----------------------------------1-Eureka 健康检测---------------------------------------

1-1:Eureka Server导入maven依赖
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
</dependency>

1-2:Eureka Server启动类添加注解，标注该服务为Eureka Server端
@EnableEurekaServer

1-3:为服务提供者添加依赖和启动注解，标注该服务为Eureka Client
@EnableDiscoveryClient

1-4创建HealthIndicator
这是一个简单的检测器类，会进行服务状态检测
进行服务状态监测。此时，通过重写 health() 方法来实现健康检查。
重写health方法，并将微服务状态写入Health对象中去，供健康检查器检测并发送至eureka

1-5:创建健康检查处理器MyHealthCheckHandler
该类实现了HealthCheckHandler，获取Health对象中当前微服务健康状态
将服务提供者的健康状态传递给Eureka服务器,
Eureka server通过心跳机制对client客户端的状态进行检测，
心跳机制会主动检测自定义健康检查处理器(也就是本类)，大概30秒会自动检测一次，然后返回状态
-----------------------------------1-Eureka 健康检测---------------------------------------





-----------------------------------2-Eureka 实现高可用------------------------------------

2-1:创建eureka server,添加依赖，在启动类中添加注解标注该类是eureka server
2-2:添加yml配置信息
此处需要注意，我在一开始是通过配置3个yml文件的方式来做eureka的高可用，在不同的yml中配置不同的端口和启动名称
，然后在通过命令--spring.profiles.active=peer2来启动不同的配置，但是我在启动的时候发现配置的都是无效的，
实际上新创建的yml并没有生效，而且新创建的yml文件图标也没有变成绿色的叶子，后来我就通过三段式的方式解决了这个
问题，但是三个yml不行的问题我并没有解决
spring:
  application:
    name: new-eureka
---
spring:
  profiles: peer1
server:
  port: 8761
eureka:
  instance:
    hostname: peer1
  client:
    service-url:
      defaultZone: http://localhost:8762/eureka/  #指定eureka服务器的地址
---
spring:
  profiles: peer2
server:
  port: 8762
eureka:
  instance:
    hostname: peer2
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/  #指定eureka服务器的地址

2-3:启动，发现8761和8762两个端口可以正常访问，且已经互相注册

2-4:启动服务消费者和服务提供者，指定注册8761服务器
eureka:
  client:
    healthcheck:
      enabled: false
    service-url:
      defaultZone: http://localhost:8761/eureka/ #指定服务注册中心地址

2-4-1:在访问8761和8762端口查看eureka server
结果:发现eureka server已经进行了互相注册，两者都可以互相查询到，且在8762中可以查询到注册到8761上的微服务
结论:说明eureka server这种互相配置的方式可以实现微服务注册的相互复制，即使微服务的注册地址是在8761上，当时在8762上
依然可以查询到注册的微服务

2-4-2:停下8761服务器，访问服务消费者
结果:服务访问正常，且该服务一直可以进行访问
结论:首先微服务实现了Eureka client，他会缓存Eureka Server中的注册信息，所以即使Server挂掉了依旧可以进行访问
在一定延迟后，8762会注销来自8761的服务，此处需要关闭服务保护机制，否则在注册中心会一直看到那个已经挂掉的服务
M:关于服务保护机制
1-client挂掉，如果服务保护机制开启了，那么client将不会被移除，但是如果client挂掉了，后续又有新的client被注册，且
失败了，那么之前失效的client将会被一移除
2-server挂掉，假设有两个server，server1挂掉后，server2并不会注销sesrver1的信息，但是当服务过多时，则会注销server1
极其下面附属的服务，client1变成了孤立的client，他只能请求缓存中的服务，所以正确的做法应该是在client中将其配置在所有的
发现组件当中
https://blog.csdn.net/tianyaleixiaowu/article/details/78184793


-----------------------------------2-Eureka 实现高可用------------------------------------