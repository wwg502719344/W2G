1-导入@EnableDiscoveryClient，开启eureka服务，开启eureka后，我们需要注意的是eureka源码是如何实现服务的注册，续约，心跳
注解 @EnableDiscoveryClient
/**
 * Annotation to enable a DiscoveryClient implementation.
 * 开启DiscoveryClient的注解
 * @author Spencer Gibb
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@Import(EnableDiscoveryClientImportSelector.class)
public @interface EnableDiscoveryClient {

	/**
	 * If true, the ServiceRegistry will automatically register the local server.
	 */
	boolean autoRegister() default true;
}

通过该代码，找到实现的源码DiscoveryClient




2:DiscoveryClient有5个实现类，其中EurekaDiscoveryClient类实现了心跳续约发现等功能，在EurekaDiscoveryClient源码中，
3个源码方法都是通过EurekaClient类去实现和发现服务的，所以真正实现了这些服务的是EurekaClient类

    public List<ServiceInstance> getInstances(String serviceId) {
        List infos = this.eurekaClient.getInstancesByVipAddress(serviceId, false);
        ...
    }

    public List<String> getServices() {
        Applications applications = this.eurekaClient.getApplications();
        ...
    }




3:EurekaClient源码解析
* EurekaClient API contracts are:
*  - provide the ability to get InstanceInfo(s) (in various different ways)
*  - provide the ability to get data about the local Client (known regions, own AZ etc)
*  - provide the ability to register and access the healthcheck handler for the client
由代码注释我们可以看出，该类提供了获取实例，服务器数据和注册，心跳等检查功能
DiscoveryClient是EurekaClient的唯一实现类，此处和最初的DiscoveryClient是不一样的，不在同一个包下，此处关注该类的构造方法

    //执行定时任务的线程池
    scheduler = Executors.newScheduledThreadPool(2,
           new ThreadFactoryBuilder()
                   .setNameFormat("DiscoveryClient-%d")
                   .setDaemon(true)
                   .build());

   //进行心跳执行的线程池
   heartbeatExecutor = new ThreadPoolExecutor(
           1, clientConfig.getHeartbeatExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,
           new SynchronousQueue<Runnable>(),
           new ThreadFactoryBuilder()
                   .setNameFormat("DiscoveryClient-HeartbeatExecutor-%d")
                   .setDaemon(true)
                   .build()
   );  // use direct handoff

   //服务获取的线程池
   cacheRefreshExecutor = new ThreadPoolExecutor(
           1, clientConfig.getCacheRefreshExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,
           new SynchronousQueue<Runnable>(),
           new ThreadFactoryBuilder()
                   .setNameFormat("DiscoveryClient-CacheRefreshExecutor-%d")
                   .setDaemon(true)
                   .build()
   );  // use direct handoff

   //进行初始化线程池
   initScheduledTasks();

4:线程池具体执行
scheduler是线程池ScheduledThreadPool，该线程池主要是执行定时任务，通过该线程池和其余对应的几个线程池实现相关功能
线程的执行通过run方法执行task，所以具体的实现功能为task

服务注册(Registry)
   /**
     * Register with the eureka service by making the appropriate REST call.
     */
    boolean register() throws Throwable {
        logger.info(PREFIX + "{}: registering service...", appPathIdentifier);
        EurekaHttpResponse<Void> httpResponse;
        try {
            httpResponse = eurekaTransport.registrationClient.register(instanceInfo);
        } catch (Exception e) {
            logger.warn(PREFIX + "{} - registration failed {}", appPathIdentifier, e.getMessage(), e);
            throw e;
        }
        if (logger.isInfoEnabled()) {
            logger.info(PREFIX + "{} - registration status: {}", appPathIdentifier, httpResponse.getStatusCode());
        }
        return httpResponse.getStatusCode() == 204;
    }




    服务续约
    /**
     * Renew with the eureka service by making the appropriate REST call
     */
    boolean renew() {
        EurekaHttpResponse<InstanceInfo> httpResponse;
        try {
            httpResponse = eurekaTransport.registrationClient.sendHeartBeat(instanceInfo.getAppName(), instanceInfo.getId(), instanceInfo, null);
            logger.debug(PREFIX + "{} - Heartbeat status: {}", appPathIdentifier, httpResponse.getStatusCode());
            if (httpResponse.getStatusCode() == 404) {
                REREGISTER_COUNTER.increment();
                logger.info(PREFIX + "{} - Re-registering apps/{}", appPathIdentifier, instanceInfo.getAppName());
                long timestamp = instanceInfo.setIsDirtyWithTime();
                boolean success = register();
                if (success) {
                    instanceInfo.unsetIsDirty(timestamp);
                }
                return success;
            }
            return httpResponse.getStatusCode() == 200;
        } catch (Throwable e) {
            logger.error(PREFIX + "{} - was unable to send heartbeat!", appPathIdentifier, e);
            return false;
        }
    }

此处可以发现是由eurekaclient向eurekaServer发送http请求