1-eureka-服务发现机制
    使用场景：如果没有eureka，服务调用者和服务消费者之间沟通则需要使用硬编码，将服务调用者的路径直接写进代码当中
    硬编码的缺点：在真实的生产环境中会部署多个消费者,如果服务提供者的端口号发生变化，则会影响到消费者对服务者的调用


1-1-服务发现者与消费者和提供者之间的关系
    1每个微服务在启动的时候，都会将自己的地址注册到服务发现者上，发现者也会存储这些微服务的地址
    2服务消费者可以通过服务发现者查询服务调用者的地址，并通过该地址访问提供者的接口
    3各个微服务和服务发现组件使用一定机制进行通信(例如心跳)，如果服务发现者与某实例长时间无法取得通信，将会注销该实例
    4当微服务的地址发生变化时，将会重新注册到发现组件中


1-2-服务发现组件具备的功能
    -1服务注册表:用于保存微服务的名称，ip，端口号，服务注册表可以用来查询API和管理API
    -2服务注册和服务发现:服务注册指的是当微服务启动时，将微服务信息注册到服务发现组件上，服务发现指的是提供微服务列表的查询
    -3服务检测:定期检测微服务，不存在则进行清理


1-3-Eureka Server和Eureka Client的作用
    -1Eureka Server提供服务发现能力，微服务在启动的时候会将名称，ip，端口等信息注册到Eureka Server上，服务发现组件会保存他们
    -2Eureka Client是一个java客户端，用于简化和Eureka Server的交互
    -3默认情况下，Eureka Server也是Eureka Client,多个Eureka Server之间通过通过彼此复制实现注册表信息的同步
    -4Eureka Client会缓存注册表中的数据信息


2-总结
    Eureka通过心跳，客户端缓存等机制，提高了系统的可用性



3-Eureka的高可用

3-1-Eureka配置文件

    eureka.instance.hostname= peer1 //设置主机名+端口访问实力

    //Eureka服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为。
    //如果此处没有禁用，则会在启动打包时报错，显示java.net.ConnectException: Connection refused: connect
    //此处若是想要将自己注册为客户端需要提供defaltZone，且defaultZone已经启动且可以进行注册，否则任然会报错
    eureka.instance.client.register-with-eureka=false
    eureka.instance.client.fetch-registry=false

    //将自己注册到peer2这个eureka上面
    //指定eureka服务器的地址
    eureka.instance.client.serviceUrl.defaultZone: http://peer2:8762/eureka/


4-Eureka元数据
    基本元数据
    主机名，IP地址，端口号，状态页健康检查等信息
    自定义元数据
    通过discoveryClient类中相关的方法可以获取到其他微服务的元数据，只是别人都是json格式，我的是一串。。。