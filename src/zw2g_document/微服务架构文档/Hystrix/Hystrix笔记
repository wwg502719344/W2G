实现容错的原因
    当微服务所依赖的服务不可用时，大量的请求，大量的并发不做任何处理的等待，会耗尽系统的资源，拖垮自身的服务

雪崩效应
    微服务架构通常包含了多个服务层，微服务之间通过网络进行通信，从而支撑起整个应用系统
    当发生基础服务故障的时候，可能会导致生产者A的消费者B无法调用，从而导致需要调用消费者B的消费者C和D都无法
调用，导致不可用逐渐放大


如何容错
    防止产生雪崩效应的手段就是要有一个强大的容错机制
    1:为网络请求设置超时
        当一个网络调用得不到响应，就意味着一个线程资源得不到释放，线程资源又对应着服务器资源，
    大量的服务器资源被占用得不到释放，就会导致服务的不可用，所以需要为网络设置超时，尽快释放服务器资源
    2:使用断路器模式
        断路器模式可以理解为对访问服务出错时候的代理，当请求对服务的访问发生大量失败时将打开断路器，断路器会
    对失败的次数进行判断，来选择是否需要继续对服务进行访问，并对访问出错的服务进行快速失败
        断路器也可以自动诊断依赖的服务是否已经恢复正常，如果发现依赖的服务已经恢复了正常，那么将会恢复对该服务的
    请求，该机制保证了在微服务挂掉的情况下快速失败，防止雪崩，当服务恢复以后，又可以重新对服务发送请求

断路器原理
    断路器关闭->请求失败率达到一定的阈值->断路器打开(不会在请求依赖的服务)->一段时间，断路器半开(允许少量的请求)
    ->请求失败，断路器继续打开->成功，断路器关闭



Hystrix
    实现超时机制和断路器模式的工具
    1:包裹请求-使用hystrixCommand包裹对依赖的调用逻辑，每个命令在独立的线程中执行，可以设置线程池的大小
    2:跳闸机制-当错误率达到了一定的程度，Hystrix会自动或者手动停止请求该服务一段时间
        --Q:如何实现自动或是手动跳闸
    3:资源隔离
        -Hystrix为每个依赖都维护了一个线程池(或是信号量)，当请求数量达到线程池数量，就会立即拒绝请求
    4:监控
        -Hystrix提供了图形化的监控工具，从而监控整个服务请求调用的情况
    5:回退机制-当请求失败，超时，被拒绝的时候，执行回退逻辑
    6:自我修复

