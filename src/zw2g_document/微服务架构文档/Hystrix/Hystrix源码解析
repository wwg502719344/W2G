命令模式
将请求和接受操作进行解耦，通过抽象构造一个接受请求，执行请求的命令类
Hystrixd的实现则运用了命令模式

Hystrix源码需要解决的问题
当服务器之间的调用存在问题，请求被积压在某个服务上得不到释放，随着积压的请求越来越多，资源池中的线程资源被耗尽
将会直接导致服务的不可用，Hystrix的作用就是容灾

Hystrix则通过运用命令模式，将请求包裹调用，通过将请求操作和接受操作进行解耦操作，实现对命令请求的控制

hystrix的核心三大件
1:HystrixCommond,HystrixObservableCommond,创建这两个类用来表达对依赖服务的调用，这两个类都传递了
相关参数，这两个类都是通过观察者模式实现了对请求命令的封装和调用
2:HystrixCircuitBreak:断路器的核心组件，用来实现针对请求断路开启关闭熔断回退的作用



核心功能1-线程隔离
线程池隔离:为每一个服务接口构造一个线程池，hystrix保存所有的线程池进入缓存当中，
相关源码解析
构建HystrixCommand，其父类进行初始化时构造线程池
this.threadPool = initThreadPool(threadPool, this.threadPoolKey, threadPoolPropertiesDefaults);

//从线程池工厂获取线程池实例
private static HystrixThreadPool initThreadPool(HystrixThreadPool fromConstructor, HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties.Setter threadPoolPropertiesDefaults) {
    if (fromConstructor == null) {
        // get the default implementation of HystrixThreadPool
        return HystrixThreadPool.Factory.getInstance(threadPoolKey, threadPoolPropertiesDefaults);
    } else {
        return fromConstructor;
    }
}

//获取实例方法
static HystrixThreadPool getInstance(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties.Setter propertiesBuilder) {
    // 获取key而不是直接获取对象本身
    String key = threadPoolKey.name();

    // 在线程池缓存中获取当前实例，如果有的话
    HystrixThreadPool previouslyCached = threadPools.get(key);
    if (previouslyCached != null) {
        return previouslyCached;
    }

    // 初始化并保存进缓存当中
    synchronized (HystrixThreadPool.class) {
        if (!threadPools.containsKey(key)) {
            threadPools.put(key, new HystrixThreadPoolDefault(threadPoolKey, propertiesBuilder));
        }
    }
    return threadPools.get(key);
}


//该类中通过ThreadPoolExecutor来构建线程池
public HystrixThreadPoolDefault(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties.Setter propertiesDefaults) {
    this.properties = HystrixPropertiesFactory.getThreadPoolProperties(threadPoolKey, propertiesDefaults);
    HystrixConcurrencyStrategy concurrencyStrategy = HystrixPlugins.getInstance().getConcurrencyStrategy();
    this.queueSize = properties.maxQueueSize().get();

    this.metrics = HystrixThreadPoolMetrics.getInstance(threadPoolKey,
            concurrencyStrategy.getThreadPool(threadPoolKey, properties),//获取线程池
            properties);
    this.threadPool = this.metrics.getThreadPool();
    this.queue = this.threadPool.getQueue();

    /* strategy: HystrixMetricsPublisherThreadPool */
    HystrixMetricsPublisherFactory.createOrRetrievePublisherForThreadPool(threadPoolKey, this.metrics, this.properties);
}


核心功能2-熔断
Hystrix在运行过程中会向每个commandkey对应的熔断器发送

//在构造方法中初始化熔断器，此处是通过工厂方法创建实例对象，因为在并发操作中通过this会造成对象逸出，所以此处要用工厂方法
private static HystrixCircuitBreaker initCircuitBreaker
(
         boolean enabled, HystrixCircuitBreaker fromConstructor,
         HystrixCommandGroupKey groupKey, HystrixCommandKey commandKey,
         HystrixCommandProperties properties, HystrixCommandMetrics metrics
){
    if (enabled) {
        if (fromConstructor == null) {
            // get the default implementation of HystrixCircuitBreaker
            return HystrixCircuitBreaker.Factory.getInstance(commandKey, groupKey, properties, metrics);
        } else {
            return fromConstructor;
        }
    } else {
        return new NoOpCircuitBreaker();
    }
}


//
public static HystrixCircuitBreaker getInstance(
        HystrixCommandKey key, HystrixCommandGroupKey group, HystrixCommandProperties properties, HystrixCommandMetrics metrics
) {

    // this should find it for all but the first time
    HystrixCircuitBreaker previouslyCached = circuitBreakersByCommand.get(key.name());
    if (previouslyCached != null) {
        return previouslyCached;
    }

    // if we get here this is the first time so we need to initialize

    // 通过ConcurrentHashMap保证线程的安全问题
    // 构建一个HystrixCircuitBreakerImpl，创建一个熔断器
    HystrixCircuitBreaker cbForCommand = circuitBreakersByCommand.putIfAbsent(key.name(), new HystrixCircuitBreakerImpl(key, group, properties, metrics));
    if (cbForCommand == null) {
        // this means the putIfAbsent step just created a new one so let's retrieve and return it
        return circuitBreakersByCommand.get(key.name());
    } else {
        // this means a race occurred and while attempting to 'put' another one got there before
        // and we instead retrieved it and will now return it
        return cbForCommand;
    }
}

线程池
===============================相关文档=========================================================
命令模式基础:
https://blog.csdn.net/zhwyj1019/article/details/79758057
Hystrix源码分析(上)
https://www.jianshu.com/p/0649f414cfcf
Hystrix官方文档翻译
https://segmentfault.com/a/1190000016185647
HystrixCircuitBreak详解
https://segmentfault.com/a/1190000016232987
个人博客内容，值得看一看
https://segmentfault.com/u/jiuguangyinglideshaonian

===============================github相关源码=========================================================
Hystrix官方wiki
https://github.com/Netflix/Hystrix/wiki/How-it-Works
Hystrix基础类源码
https://github.com/Netflix/Hystrix/tree/master/hystrix-core/src/main/java/com/netflix/hystrix
