1：添加相关服务的依赖
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
    <version>1.4.4.RELEASE</version>
</dependency>



2：在启动类添加注解@EnableHystrix，启动断路器相关服务



3：在消费者控制器方法中添加注解
@HystrixCommand(fallbackMethod = "findByIdsBack")，并添加findByIdsBack方法
当提供者服务不可用时，将会回退执行findByIdsBack方法
在@HystrixCommand中，可以对线程的降级操作进行属性配置，也可以设置hystrix的隔离策略(线程隔离或是信号隔离)
官方demo地址:
https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica#configuration
@HystrixCommand(commandProperties = {
        @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "500")
    },
            threadPoolProperties = {
                    @HystrixProperty(name = "coreSize", value = "30"),
                    @HystrixProperty(name = "maxQueueSize", value = "101"),
                    @HystrixProperty(name = "keepAliveTimeMinutes", value = "2"),
                    @HystrixProperty(name = "queueSizeRejectionThreshold", value = "15"),
                    @HystrixProperty(name = "metrics.rollingStats.numBuckets", value = "12"),
                    @HystrixProperty(name = "metrics.rollingStats.timeInMilliseconds", value = "1440")
    })
public User getUserById(String id) {
    return userResource.getUserById(id);
}
Q:这里有个问题，就是我在首次请求消费服务方法的时候，不论提供者服务方法是否正常，都会直接进入回退方法，但是第二次
在请求的话，就会顺利调用提供者的相关方法
S:添加了ribbon的超时请求和hystrix的超时请求，依然在首次请求是直接进入HystrixCommand包裹的方法中
A:
结尾:当请求超时，断路器打开，微服务挂掉，都会进入回退方法，但是，进入回退方法并不代表断路器被打开了
断路器被打开的条件是:当请求发生错误的比重超出断路器的阈值，则会打开断路器



4：hystrix配合actuator,显示hystrix状态
此处根据文档上描述，连接断路器的状态也暴露在呼叫应用程序的/health端点中，但是我在测试 过程中无法查看到hystrix的状态
具体原因不知
M:在官方的health描述中，显示应用的健康状态(当使用一个未认证连接访问时，只显示status，但一个已认证连接访问时
，则会显示全部信息)
此处我猜测 显示出hystrix健康状态的原因应该就是因为我的请求并不是被认证的



5：hystrix结合feign,feign包裹hystrix，实现feign进行负载调用失败时候的回退

5-1：配置文件中打开feign包裹hystrix的配置
feign.hystrix.enabled=true
完成feign对hystrix的支持，之前没有添加，一直报错
Load balancer does not have available server for client:xxxxxx

5-2：实现回退逻辑
在StoreClient接口中，添加注解
fallback = HystrixClientFallback.class)，指定回退的类，
编写HystrixClientFallback类，该类实现回退接口StoreClient的方法
在该类中实现StoreClient的回退方法

5-3：打印回退日志
fallback会实现回退方法，但如果我们希望知道回退的原因，可以通过在@FeignClient中使用属性fallbackFactory来实现
fallbackFactory = HystrixClientFallbackFactory.class)
同样，我们需要创建HystrixClientFallbackFactory，该类实现接口FallbackFactory<HystrixClient>
将回退方法写在实现类create中
实现方法如下:
@Override
public HystrixClient create(Throwable cause) {
    return new HystrixClient() {
        @Override
        public Hello iFailSometimes() {
            return new Hello("fallback; reason was: " + cause.getMessage());
        }
    };
}
在特定的情况下cause可能为null，此处为feign的bug，没事的时候可以研究下


6-hystrix的监控

6-1:通过/actuator/hystrix.stream对hystrix进行数据监控
hystrix提供了访问接口的实时监控，包括请求数，请求时间，请求接口名称等
查看访问情况调用
http://localhost:8200/actuator/hystrix.stream
如果没有访问接口，调用该方法无法获取任何数据且消耗cpu资源
开启监控的需要在yml文件中进行配置
management:
  endpoints:
    web:
      exposure:
        include: '*'

注:@EnableCircuitBreaker注解，启动断路器



6-2：通过Dashboard对Hystrix进行图形化监控
6-2-1：添加相关依赖
6-2-2：在启动类中添加启动Dashboard的注解
@EnableHystrixDashboard
6-2-3：访问端点/hystrix即可查看
6-2-4：此处在填写监控地址的时候需要注意，如果我们是用actuator，那么在hystrix.stream前腰加上路径actuator，文档上有提示
如果没有添加actuator，则会报错
Unable to connect to Command Metric Stream.

Q1:当我添加jar包的时候，在maven的依赖列表中显示version是unknow，这个问题出现了多次了，我自己的maven私服访问是没有问题
的，出现的原因暂时不清楚
A1:解决的方案是添加上依赖jar的version，可以通过搜索maven 资源名 的方式找到version

Q2:在Feign中使用断路器，hystrixDashboard无法对接口进行监控
A2:需要在配置文件中打开断路器 feign.hystrix.enabled=true

M:在获取相关资料最原始出处，往往是在github，在wiki中有详细介绍，springcloud中相关组件的github建议先上springcloud的
中文网站，进入相关组件的模块，里面有组件在github的传送门，springcloud都帮我们把这些组件集成好了，用起来是非常方便的


7使用Turbine监控多个微服务(非代码实际测试)
7-1:创建一个Turbine项目，该项目的作用是找到其他注册在Eureka Server上的微服务，并聚合这两个微服务的监控数据
7-2:项目创建完成，添加依赖，启动项添加注解，配置yml文件(配置监控的微服务)

turbine:
  aggregator:
    clusterConfig: default   # 指定聚合哪些集群，多个使用","分割，默认为default。可使用http://.../turbine.stream?cluster={clusterConfig之一}访问
  appConfig: service-hi,service-lucy  ### 配置Eureka中的serviceId列表，表明监控哪些服务
  clusterNameExpression: new String("default")

clusterNameExpression指定集群名称，默认表达式appName；此时：turbine.aggregator.clusterConfig需要配置想要监控的应用名称
当clusterNameExpression: default时，turbine.aggregator.clusterConfig可以不写，因为默认就是default(监控所有)
当clusterNameExpression: metadata['cluster']时，假设想要监控的应用配置了eureka.instance.metadata-map.cluster: ABC，则需要配置，同时turbine.aggregator.clusterConfig: ABC
--总结
clusterNameExpression是集群名称，如果自定义，则需要配置需要监控的应用的名称
如果是default，则默认监听所有应用



8-feign与ribbon作为负载均衡的使用与关系
feign也具备负载均衡的作用，feign内部已经融合了ribbon服务，通过feign调用服务提供者，会将请求分发至
具有相同application-name的提供者服务上
feign通过调用接口的方式进行请求，通过@FeignClient(name="new-user")进行服务的调用


9-feign和hystrix的使用和关系