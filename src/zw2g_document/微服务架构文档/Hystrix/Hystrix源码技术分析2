全文阅读hystrix系列文章
https://www.jianshu.com/p/1bfa88aa2420
https://www.jianshu.com/p/c8a998c9a571


内容索引:
一:hystrix的核心理解和实现
二:hystrix的命令模式
三:hystrix部分源码理解
四:hystrix熔断器执行策略
五:hystrix的执行逻辑


一:hystrix的核心理解和实现
hystrixCommand是整个hystrix的核心，hystrix的回退，请求包裹都是围绕这这个类展开的;

commandkey是command的名称，commandgroup是分组，方便hystrix进行监控和报警,
commandKey是以方法为单位的，一个类的默认commandKey是当前类的方法的名字;

使用hystrix进行容错，实际上就是将业务请求包裹在继承自hystrixCommand的类中，当请求
调用我们接口的时候，实际调用的就是run方法，在这个类中还有fallback方法，实际就是我们的
回退类，注解的使用知识帮助我们省去了重复造轮子的过程，实际的执行过程就是我们被HystrixCommand
包裹的业务方法



二:hystrix的命令模式
目的是为了解耦请求者和实现者
通过应用多态的特性，统一对命令的实现者进行业务的执行
缺点:
需要创建很多的类





三:hystrix部分源码理解
hystrix线程池的创建:对于hystrix来说，在构造方法中会进行线程池和一些基本信息的初始化，其中
就包括了线程池，这个线程池中包含了对这个接口方法调用的线程限制，每次在创建的时候会先去缓存中获取
commandkey，如果有则直接获取，没有则进行创建工作





四:hystrix熔断器执行策略
hystrixCircuitBreak:熔断类，当请求负载超过阈值的时候执行回退command
hystrixCircuitBreakImpl:熔断类的实现类
OPEN,CLOSE,HALF-OPEN:熔断类的三个状态，此处采取消息订阅机制，当订阅类采集的数据超出阈值大小的时候，
就会打开熔断类的开关
attemptExecution:判断熔断状态是否打开，如果已经开启了熔断状态则执行回退command



五:hystrix的执行逻辑
每一个command在调用的时候都会被创建，创建Command后会创建或获取相关的key，一个Command被组装完成后，
通过RXJava对Command，fallback等进行调用