1-并发环境下为什么使用ConcurrentHashMap

    1-1：
        java7中HashMap在高并发的情况下，通过put操作会导致HashMap的entry链表形成环链，
    从而造成entry的next节点用不为空因而产生死循环

    1-2:
        Unsafe类:java不能直接访问操作系统底层，而是通过native方法来访问，Unsafe提供了硬件级别的原子操作
    (有空研究源码)
        1-2-1：分配内存，释放内存
        1-2-2：可以定位对象字段的内存位置，也可以修改字段值
        1-2-3：挂起与恢复-LockSupport中的park方法也是调用了Unsafe.park()
        1-2-4：CAS操作


    1-3:
        concurrentHashMap源码解析put操作
        1，首先查看传递的key和value是否为空，为空则抛出异常，否则进入第二步
        2，根据key值计算出hash值，进行3
        3，进入死循环,判断获取的table是否初始化，如果没有初始化则进行初始化操作，返回2，否则执行4
        4，查找指定的tab，赋值给f，根据以下的状态进行处理
            1，如果table[i]==null,利用CAS操作直接存储在该位置
            2，如果tab[i]不为空，且hash值为MOVED(-1)，进行扩容处理
            3，如果hash值大于0，是链表结构，则直接插入链表，如果是树节点，则插入树中，进行5
        5，如果table[i]是树结构，则检查第i位置是否需要转换为树结构
