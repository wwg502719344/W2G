Q1:java语言整体的编译过程是怎么样的--------------------------------------------------------
A1:对于物理机器而言，是无法识别人类的代码的，而是根据指令行事，所以，如果想让机器懂我们写的程序，就需
要对我们的程序进行翻译或是编译成机器可以识别的指令，针对这种行为，程序语言在最终转变为机器可以识别的
指令之前，需要有两种转变的操作，一种是解释，一种是编译
js代码是解释型语言，可直接解释翻译成机器可以识别的代码
c/c++则是属于编译语言，需要一个完整的编译过程
java则是属于半编译语言，因为java语言在转为机器识别的指令之前需要经历两个步骤
第一步就是编译过程，javac将我们的java代码编译成class文件，class文件的本质则是字节码文件，内容
...是十六进制字节码指令流，class内容只有jvm才能读懂
第二步则是类加载器加载class文件进入jvm，最终转为机器识别的指令，在这个过程中，分为两种情况

第一种就是解释执行class文件，将其翻译成指令，这种方式优点是执行快，但是运行效率较低
第二种则是进行编译，将其编译为本地代码，编译则是通过JIT编译器，也就是即时编译器，将字节码编译为本地
代码，这样做可以显著提高执行效率，缺点是编译花费时间较长
打个比方，我和一个老外讨论技术，我说中文，配了一个即时翻译，我说什么他翻什么，这样我和老外之间可以最快的
进行交流，这就好比上面说的解释器，编译器则是我和老外交流，我英文也很6，但是我说的东西太抽象了老外听不懂，
这时候我就需要拿纸笔将我想表达的东西，用最易懂的方式精简成文字或图片，他一看就懂了，但这个过程是需要花费
时间的，这就是编译过程
在实际的操作中，解释和编译是相互配合的，且编译不是必要的，但却是衡量一个JVM效率的重要指标，具体配合可以
看书，深入理解java虚拟机第11章


Q2:基于栈的指令集及解释器执行过程-------------------------------------------------------------------



参考资料：
Q1
 -深入理解java虚拟机第8章8.4小章-基于栈的字节码解释执行引擎
 -深入理解java虚拟机第10章10.1小章-早期(编译器)优化概述
 -深入理解java虚拟机第11章11.1,11.2,11.2.1三个小章-晚期(运行期)优化

Q2
 -深入理解java虚拟机第8章8.4.3-8.4.3两小章-基于栈的解释器执行过程