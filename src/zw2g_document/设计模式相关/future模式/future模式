
future模式
1客户端发起请求-->服务端返回客户端一个契约-->客户端继续执行其余任务-->在完成了其他与数据无关的任务后，在使用利用空余时间返回的数据。。。
-->充分利用时间，提高效率-->future模式的核心


future主要特色
main-->主类，用于系统启动，调用Client发出请求
Client-->返回data数据，立即返回futureData，并开启ClientThread装载
data-->返回数据的接口
futureData-->构造较快，返回临时契约，是虚拟的数据，需要装载realData
realData-->返回真实数据，构造比较慢



设计模式实现类

产生真实数据步骤
    1-main类:主类，运行相关方法,向client类发出请求，返回data(实则为futureData)
    2-Client类:主方法请求该类，返回一个data数据，这时候返回的是futureData，并不是真实数据，同时会异步发出请求去获取真实数据...
    并将最终realdata数据装载进futureData，主类在进行调用
    3-realData类:构造执行相应的方法，得到实际数据
    4-future类:装载realData类


获取真实数据步骤
    1-main类:通过方法返回的data数据，调用future类，获取future装载的realData数据
    2-future类:调用realData类方法获取真实数据
    3-realData类:返回真实数据







=============================Future模式在源码中的实现BEGIN=====================================

jdk实现futuretask源码:

    futureTask：实现了runnableFuture方法，runnableFuture方法继承了runnable方法和future方法
    继承runnableFuture的目的是为了实现run方法，在futureTask被执行的时候，执行run方法可以获取返回的数据
    继承future方法是为了将得到的数据封装到future对象中，实现数据的读取存放

    callable对象:构造futureTask对象的时候需要传入实体类(需要实现callable接口)作为构造传参，
    在执行run方法中，调用call方法(获取数据方法)，并将数据返回

    Executor类:运行futureTask类，执行run方法



基本构造：

    /** The thread running the callable; CASed during run() */
    private volatile Thread runner;//指向当前正在运行的callable的线程

    /** Treiber stack of waiting threads */
    private volatile WaitNode waiters;//阻塞队列，如果当前任务还没有执行完成，调用get()方法的线程就会进入阻塞

    /** The result to return or exception to throw from get() */
    // 返回的结果或者调用get()方法抛出的异常
    private Object outcome; // non-volatile, protected by state reads/writes

    Possible state transitions:
    futureTask对象的状态转变
    NEW -> COMPLETING -> NORMAL  初始化 -> 计算完成(还没有将计算结果赋值给) -> 执行完成
    NEW -> COMPLETING -> EXCEPTIONAL 初始化 -> 计算完成(还没有将计算结果赋值给) -> 抛出异常
    NEW -> CANCELLED 初始化 -> 取消任务
    NEW -> INTERRUPTING -> INTERRUPTED 初始化 -> 打断

    private volatile int state;//任务当前的状态
    private static final int NEW          = 0;//初始化时是NEW
    private static final int COMPLETING   = 1;//任务完成但是尚未赋值给outcome
    private static final int NORMAL       = 2;//任务完成且赋值给outcome
    private static final int EXCEPTIONAL  = 3;//异常状态
    private static final int CANCELLED    = 4;//任务取消
    private static final int INTERRUPTING = 5;//任务打断
    private static final int INTERRUPTED  = 6;//

    构造方法:
    有两种构造方法，一个是接收Callable对象，一个是接受Runnable对象，对于futuretask来说，我们实际上是需要返回结果的...
    所以我们必须实现callable对象的call()方法，接收runnable对象的构造方法实际也是将runnable对象改造成了callable对象


使用场景:


====================================================================================================
总结:
    主要思路是通过异步的方式实现程序对未来数据的获取，比如说
    线程A的执行需要B的结果，但是实际上A并不需要等待B执行完，而是先获取一个B的future，等待将来的某个时候获取B的数据










=============================QUESTION=====================================
Q1:服务端返回给客户端的契约是什么
A1:返回的契约就是futureData数据，实际上并没有获取真实数据

Q2:往future类中装载的realData到底有什么作用
A2:一方面修改状态，提示后面可以进行获取操作，一方面可以使用装载得到的realdata数据获取得到真实数据

Q3:如何得知实际数据已经完成了呢
A3:调用获取实际数据的方法，如果数据已经装载成功则直接返回数据，否则进入await

Q4:future接口和futureTask的关系
A4:futureTask实现了RunnableFuture接口，RunnableFuture接口继承了runnable类和future类

=============================ANSWER=====================================
参考文章:
demo源码和jdk源码
https://blog.csdn.net/xlgen157387/article/details/78390642

futuretask源码详解
https://www.jianshu.com/p/55221d045f39

future设计模式的核心关键点:
https://blog.csdn.net/yangkai_hudong/article/details/12904813
